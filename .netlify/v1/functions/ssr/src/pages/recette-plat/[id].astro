---
import Layout from "../../layouts/Layout.astro";
import {
    getRecetteById,
    getRecettesSimilaires,
    getAllRecettes,
} from "../../backend.mjs";
import Plat from "../../components/Plat.astro";

// ‚úÖ FONCTION OBLIGATOIRE pour les routes dynamiques
export async function getStaticPaths() {
    try {
        const recettes = await getAllRecettes();

        console.log(
            "üìã G√©n√©ration des pages statiques pour",
            recettes.length,
            "recettes",
        );

        return recettes.map((recette) => ({
            params: {
                id: recette.id,
            },
            props: {
                recette: recette,
            },
        }));
    } catch (error) {
        console.error(
            "‚ùå Erreur lors de la g√©n√©ration des chemins statiques:",
            error,
        );
        return [];
    }
}

const { id } = Astro.params;
const { recette: recetteProp } = Astro.props;

let recette;
let recettesSimilaires = [];

if (recetteProp) {
    recette = recetteProp;
    console.log("‚úÖ Utilisation des donn√©es depuis getStaticPaths");
    console.log("üìù Donn√©es de la recette:", JSON.stringify(recette, null, 2));
} else {
    console.log("üì° R√©cup√©ration des donn√©es via API...");
    try {
        recette = await getRecetteById(id);
        if (!recette) {
            Astro.redirect("/recette-plat", 302);
            return;
        }
    } catch (error) {
        console.error("‚ùå Erreur:", error);
        Astro.redirect("/recette-plat", 302);
        return;
    }
}

try {
    recettesSimilaires = await getRecettesSimilaires(id, 4);
} catch (error) {
    console.error("‚ùå Erreur recettes similaires:", error);
}

// Construire l'URL de l'image PocketBase
let imageUrl = "/placeholder.svg";
if (recette.img) {
    imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
}

// G√©rer les ingr√©dients
let ingredientsList = [];
if (recette.ingredients) {
    if (Array.isArray(recette.ingredients)) {
        ingredientsList = recette.ingredients;
    } else if (typeof recette.ingredients === "string") {
        ingredientsList = recette.ingredients
            .split(",")
            .map((ing) => ing.trim());
    }
}

// G√©rer le r√©gime
let regimeList = [];
if (recette.regime && recette.regime !== "Select -") {
    if (Array.isArray(recette.regime)) {
        regimeList = recette.regime;
    } else if (typeof recette.regime === "string") {
        regimeList = [recette.regime];
    }
}

// Afficher les calories seulement si > 0
const showCalories =
    recette.calories && recette.calories !== "0" && recette.calories !== 0;
---

<Layout>
    <!-- Hero de la recette -->
    <section class="relative w-full h-[500px]">
        <img
            src={imageUrl || "/placeholder.svg"}
            alt={recette.nom}
            class="w-full h-full object-cover"
            onerror="this.src='/placeholder.svg'"
        />
        <div
            class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-black/20 flex items-center justify-center"
        >
            <div class="text-center text-white px-4">
                <h1
                    class="text-4xl md:text-6xl font-bold mb-4 uppercase drop-shadow-lg"
                >
                    {recette.nom}
                </h1>
                <div class="flex justify-center gap-6 text-lg flex-wrap">
                    <span class="bg-black/30 backdrop-blur-sm px-3 py-1 rounded"
                        >‚è±Ô∏è {recette.temps_prep || "30 min"}</span
                    >

                    {
                        showCalories && (
                            <span class="bg-orange-500/80 backdrop-blur-sm px-3 py-1 rounded">
                                üî• {recette.calories} cal
                            </span>
                        )
                    }

                    {
                        recette.categorie && (
                            <span class="bg-blue-500/80 backdrop-blur-sm px-3 py-1 rounded">
                                üìÇ{" "}
                                {recette.categorie === "entree"
                                    ? "Entr√©e"
                                    : recette.categorie === "plat"
                                      ? "Plat"
                                      : recette.categorie === "dessert"
                                        ? "Dessert"
                                        : recette.categorie}
                            </span>
                        )
                    }

                    {
                        regimeList.length > 0 &&
                            regimeList.map((regimeType) => {
                                const regimeConfig = {
                                    v√©g√©tarien: {
                                        icon: "üå±",
                                        color: "bg-green-500/80",
                                    },
                                    v√©gan: {
                                        icon: "üåø",
                                        color: "bg-green-500/80",
                                    },
                                    "sans-gluten": {
                                        icon: "üåæ",
                                        color: "bg-blue-500/80",
                                    },
                                    halal: {
                                        icon: "‚ò™Ô∏è",
                                        color: "bg-purple-500/80",
                                    },
                                };
                                const config = regimeConfig[
                                    regimeType.toLowerCase()
                                ] || { icon: "üçΩÔ∏è", color: "bg-gray-500/80" };

                                return (
                                    <span
                                        class={`${config.color} backdrop-blur-sm px-3 py-1 rounded`}
                                    >
                                        {config.icon} {regimeType}
                                    </span>
                                );
                            })
                    }

                    {
                        recette.isFavorite && (
                            <span class="bg-red-500/80 backdrop-blur-sm px-3 py-1 rounded">
                                ‚ù§Ô∏è Favoris
                            </span>
                        )
                    }

                    {
                        recette.sponsorise && (
                            <span class="bg-yellow-500/80 backdrop-blur-sm px-3 py-1 rounded">
                                üåü Sponsoris√©
                            </span>
                        )
                    }
                </div>
            </div>
        </div>
    </section>

    <!-- Contenu de la recette -->
    <div class="max-w-6xl mx-auto px-6 py-12">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
            <!-- Ingr√©dients -->
            <div class="lg:col-span-1">
                <div class="bg-gray-50 p-6 rounded-lg sticky top-6 space-y-6">
                    <!-- Informations nutritionnelles -->
                    {
                        (showCalories || regimeList.length > 0) && (
                            <div>
                                <h3 class="text-lg font-bold mb-4">
                                    INFORMATIONS NUTRITIONNELLES
                                </h3>

                                {showCalories && (
                                    <div class="mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                                        <div class="flex items-center justify-between">
                                            <span class="font-medium text-orange-800">
                                                Calories
                                            </span>
                                            <span class="text-xl font-bold text-orange-600">
                                                üî• {recette.calories}
                                            </span>
                                        </div>
                                    </div>
                                )}

                                {regimeList.length > 0 && (
                                    <div>
                                        <h4 class="font-medium text-gray-700 mb-2">
                                            REGIMES COMPATIBLES
                                        </h4>
                                        <div class="space-y-2">
                                            {regimeList.map((regimeType) => {
                                                const regimeConfig = {
                                                    v√©g√©tarien: {
                                                        icon: "üå±",
                                                        color: "bg-green-50 border-green-200 text-green-800",
                                                        label: "VEGETARIEN",
                                                    },
                                                    v√©gan: {
                                                        icon: "üåø",
                                                        color: "bg-green-50 border-green-200 text-green-800",
                                                        label: "VEGAN",
                                                    },
                                                    "sans-gluten": {
                                                        icon: "üåæ",
                                                        color: "bg-blue-50 border-blue-200 text-blue-800",
                                                        label: "SANS GLUTEN",
                                                    },
                                                    halal: {
                                                        icon: "‚ò™Ô∏è",
                                                        color: "bg-purple-50 border-purple-200 text-purple-800",
                                                        label: "Halal",
                                                    },
                                                };
                                                const config = regimeConfig[
                                                    regimeType.toLowerCase()
                                                ] || {
                                                    icon: "üçΩÔ∏è",
                                                    color: "bg-gray-50 border-gray-200 text-gray-800",
                                                    label: regimeType,
                                                };

                                                return (
                                                    <div
                                                        class={`p-2 border rounded ${config.color}`}
                                                    >
                                                        <span class="font-medium">
                                                            {config.icon}{" "}
                                                            {config.label}
                                                        </span>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </div>
                                )}
                            </div>
                        )
                    }

                    <!-- Ingr√©dients -->
                    <div>
                        <h2 class="text-2xl font-bold mb-6">INGREDIENTS</h2>

                        {
                            ingredientsList.length > 0 ? (
                                <ul class="space-y-3">
                                    {ingredientsList.map((ingredient) => (
                                        <li class="flex items-center">
                                            <span class="w-2 h-2 bg-yellow-500 rounded-full mr-3" />
                                            <span>{ingredient}</span>
                                        </li>
                                    ))}
                                </ul>
                            ) : (
                                <p class="text-gray-500">
                                    Aucun ingr√©dient sp√©cifi√©
                                </p>
                            )
                        }
                    </div>
                </div>
            </div>

            <!-- Instructions -->
            <div class="lg:col-span-2">
                <h2 class="text-2xl font-bold mb-6">PREPARATION</h2>

                <!-- Contenu des instructions avec gestion dynamique -->
                <div class="prose max-w-none">
                    <div
                        class="text-gray-800 whitespace-pre-line leading-relaxed"
                    >
                        {
                            recette.preparation ||
                                "Instructions de pr√©paration non disponibles"
                        }
                    </div>
                </div>

                {
                    recette.sponsorise && (
                        <div class="mt-12 p-6 bg-yellow-50 border-l-4 border-yellow-500 rounded-r-lg">
                            <h3 class="font-bold text-lg mb-3">
                                RECETTE SPONSORISEE
                            </h3>
                            <p class="text-gray-700">
                                Cette recette est sponsoris√©e par notre
                                partenaire
                            </p>
                        </div>
                    )
                }
            </div>
        </div>
    </div>

    <!-- Actions -->
    <section class="py-8 px-6 border-t border-gray-200">
        <div class="max-w-6xl mx-auto flex justify-center gap-4 flex-wrap">
            <button
                class="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg transition font-medium js-favori-btn"
                data-id={recette.id}
            >
                <svg
                    class="w-5 h-5 inline mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                    ></path>
                </svg>
                <span class="button-text">
                    {
                        recette.isFavorite
                            ? "Retirer des favoris"
                            : "Ajouter aux favoris"
                    }
                </span>
            </button>
            <button
                class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition font-medium"
                onclick="window.print()"
            >
                üñ®Ô∏è Imprimer la recette
            </button>
            <button
                class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg transition font-medium"
                onclick="navigator.share ? navigator.share({title: document.title, url: window.location.href}) : navigator.clipboard.writeText(window.location.href)"
            >
                üì§ Partager
            </button>
        </div>
    </section>

    <!-- Section Commentaires -->
    <section class="bg-gray-50 py-12 px-6">
        <div class="max-w-6xl mx-auto">
            <div class="bg-white rounded-lg shadow-lg p-8">
                <h2 class="text-2xl font-bold mb-8 flex items-center">
                    üí¨ Commentaires et avis
                    <span
                        id="commentCount"
                        class="ml-2 text-sm bg-gray-100 px-2 py-1 rounded-full"
                        >0</span
                    >
                </h2>

                <!-- Formulaire d'ajout de commentaire -->
                <div id="commentForm" class="mb-8 p-6 bg-gray-50 rounded-lg">
                    <!-- √âtat non connect√© -->
                    <div id="notLoggedComment" class="text-center py-8">
                        <div class="text-4xl mb-4">üîí</div>
                        <h3 class="text-lg font-bold mb-2">
                            Connectez-vous pour laisser un avis
                        </h3>
                        <p class="text-gray-600 mb-4">
                            Partagez votre exp√©rience avec cette recette !
                        </p>
                        <a
                            href="/connexion"
                            class="inline-block bg-yellow-500 hover:bg-yellow-600 text-white font-bold px-6 py-3 rounded-lg transition"
                        >
                            Se connecter
                        </a>
                    </div>

                    <!-- Formulaire pour utilisateur connect√© -->
                    <div id="loggedComment" class="hidden">
                        <h3 class="text-lg font-bold mb-4">
                            Laissez votre avis
                        </h3>
                        <form id="addCommentForm" class="space-y-4">
                            <!-- Syst√®me de notation -->
                            <div>
                                <label
                                    class="block text-sm font-medium text-gray-700 mb-2"
                                    >Note (optionnel)</label
                                >
                                <div
                                    class="flex items-center space-x-1"
                                    id="starRating"
                                >
                                    <button
                                        type="button"
                                        class="star-btn text-2xl text-gray-300 hover:text-yellow-400 transition"
                                        data-rating="1">‚≠ê</button
                                    >
                                    <button
                                        type="button"
                                        class="star-btn text-2xl text-gray-300 hover:text-yellow-400 transition"
                                        data-rating="2">‚≠ê</button
                                    >
                                    <button
                                        type="button"
                                        class="star-btn text-2xl text-gray-300 hover:text-yellow-400 transition"
                                        data-rating="3">‚≠ê</button
                                    >
                                    <button
                                        type="button"
                                        class="star-btn text-2xl text-gray-300 hover:text-yellow-400 transition"
                                        data-rating="4">‚≠ê</button
                                    >
                                    <button
                                        type="button"
                                        class="star-btn text-2xl text-gray-300 hover:text-yellow-400 transition"
                                        data-rating="5">‚≠ê</button
                                    >
                                    <span
                                        id="ratingText"
                                        class="ml-2 text-sm text-gray-600"
                                    ></span>
                                </div>
                                <input
                                    type="hidden"
                                    id="selectedRating"
                                    value=""
                                />
                            </div>

                            <!-- Commentaire -->
                            <div>
                                <label
                                    for="commentContent"
                                    class="block text-sm font-medium text-gray-700 mb-2"
                                    >Votre commentaire</label
                                >
                                <textarea
                                    id="commentContent"
                                    rows="4"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 resize-none"
                                    placeholder="Partagez votre exp√©rience avec cette recette..."
                                    required
                                    minlength="10"
                                    maxlength="1000"></textarea>
                                <div
                                    class="flex justify-between text-xs text-gray-500 mt-1"
                                >
                                    <span>Minimum 10 caract√®res</span>
                                    <span id="charCount">0/1000</span>
                                </div>
                            </div>

                            <!-- Message d'erreur -->
                            <div
                                id="commentError"
                                class="text-red-500 text-sm hidden"
                            >
                            </div>

                            <!-- Boutons -->
                            <div class="flex gap-3">
                                <button
                                    type="submit"
                                    class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold px-6 py-2 rounded-lg transition"
                                    id="submitComment"
                                >
                                    üìù Publier le commentaire
                                </button>
                                <button
                                    type="button"
                                    class="bg-gray-300 hover:bg-gray-400 text-gray-700 font-bold px-6 py-2 rounded-lg transition"
                                    onclick="document.getElementById('addCommentForm').reset(); updateCharCount(); resetStars();"
                                >
                                    üóëÔ∏è Effacer
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Liste des commentaires -->
                <div id="commentsList">
                    <!-- √âtat de chargement -->
                    <div id="commentsLoading" class="text-center py-8">
                        <div class="text-2xl mb-2">‚è≥</div>
                        <p class="text-gray-600">
                            Chargement des commentaires...
                        </p>
                    </div>

                    <!-- √âtat vide -->
                    <div id="noComments" class="text-center py-12 hidden">
                        <div class="text-6xl mb-4">üí≠</div>
                        <h3 class="text-xl font-bold mb-2">
                            Aucun commentaire pour le moment
                        </h3>
                        <p class="text-gray-600">
                            Soyez le premier √† partager votre avis sur cette
                            recette !
                        </p>
                    </div>

                    <!-- Commentaires -->
                    <div id="commentsContainer" class="space-y-6 hidden">
                        <!-- Les commentaires seront ajout√©s ici dynamiquement -->
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Recettes similaires -->
    {
        recettesSimilaires.length > 0 && (
            <section class="bg-gray-50 py-12 px-6">
                <div class="max-w-6xl mx-auto">
                    <h2 class="text-2xl md:text-3xl font-bold mb-8">
                        RECETTES SIMILAIRES
                    </h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                        {recettesSimilaires.map((recette) => (
                            <Plat
                                id={recette.id}
                                nom={recette.nom}
                                img={recette.img}
                                temps_prep={recette.temps_prep}
                                isFavorite={recette.isFavorite}
                                sponsorise={recette.sponsorise}
                                categorie={recette.categorie}
                                calories={recette.calories}
                                regime={recette.regime}
                                ingredients={
                                    Array.isArray(recette.ingredients)
                                        ? recette.ingredients.join(", ")
                                        : recette.ingredients || ""
                                }
                            />
                        ))}
                    </div>
                </div>
            </section>
        )
    }
</Layout>

<script>
    import { initFavorisButtons } from "../../js/favoris.js";
    import PocketBase from "pocketbase";
    import { isLoggedIn, getCurrentUser } from "../../js/auth.js";
    import { pb } from "../../js/favoris.js";

    let currentRecetteId = "";

    document.addEventListener("DOMContentLoaded", async () => {
        console.log("üöÄ Initialisation de la page recette");

        // R√©cup√©rer l'ID de la recette depuis l'URL
        currentRecetteId = window.location.pathname.split("/").pop();
        console.log("üìù ID de la recette:", currentRecetteId);

        // Attendre un peu pour que le DOM soit compl√®tement charg√©
        setTimeout(async () => {
            // Initialiser la gestion des favoris
            console.log("‚ù§Ô∏è Initialisation des favoris...");
            initFavorisButtons();

            // Initialiser l'√©tat des c≈ìurs
            await initFavoriteState();

            // Initialiser les commentaires
            initComments();

            // Charger les commentaires
            await loadComments();
        }, 100);
    });

    // Fonction pour initialiser l'√©tat du favori
    async function initFavoriteState() {
        if (!isLoggedIn()) {
            console.log("‚ö†Ô∏è Utilisateur non connect√©, pas de favori √† charger");
            return;
        }

        try {
            console.log(
                "üîç V√©rification du favori pour la recette:",
                currentRecetteId,
            );

            const favoris = await pb.collection("favoris").getFullList({
                filter: `user = "${getCurrentUser().id}" && recette = "${currentRecetteId}"`,
            });

            const isFavorite = favoris.length > 0;
            console.log("‚ù§Ô∏è Recette favorite:", isFavorite);

            const favorisButton = document.querySelector(".js-favori-btn");
            const heartIcon = favorisButton?.querySelector("svg");
            const buttonText = favorisButton?.querySelector(".button-text");

            if (favorisButton) {
                console.log("üéØ Bouton favori trouv√©");
                if (heartIcon) {
                    if (isFavorite) {
                        heartIcon.setAttribute("fill", "red");
                        heartIcon.style.color = "red";
                    } else {
                        heartIcon.setAttribute("fill", "none");
                        heartIcon.style.color = "currentColor";
                    }
                }

                if (buttonText) {
                    buttonText.textContent = isFavorite
                        ? "Retirer des favoris"
                        : "Ajouter aux favoris";
                }
            } else {
                console.error("‚ùå Bouton favori non trouv√©");
            }
        } catch (error) {
            console.error(
                "‚ùå Erreur lors de l'initialisation du favori:",
                error,
            );
        }
    }

    // Initialiser le syst√®me de commentaires
    function initComments() {
        const notLoggedComment = document.getElementById("notLoggedComment");
        const loggedComment = document.getElementById("loggedComment");
        const commentContent = document.getElementById("commentContent");
        const addCommentForm = document.getElementById("addCommentForm");

        // V√©rifier l'√©tat de connexion
        if (isLoggedIn()) {
            notLoggedComment?.classList.add("hidden");
            loggedComment?.classList.remove("hidden");
        } else {
            notLoggedComment?.classList.remove("hidden");
            loggedComment?.classList.add("hidden");
        }

        // Gestion du compteur de caract√®res
        if (commentContent) {
            commentContent.addEventListener("input", updateCharCount);
        }

        // Gestion du syst√®me d'√©toiles
        initStarRating();

        // Gestion du formulaire
        if (addCommentForm) {
            addCommentForm.addEventListener("submit", handleCommentSubmit);
        }
    }

    // Syst√®me de notation par √©toiles
    function initStarRating() {
        const starButtons = document.querySelectorAll(".star-btn");
        const ratingText = document.getElementById("ratingText");
        const selectedRating = document.getElementById("selectedRating");

        const ratingLabels = {
            1: "D√©cevant",
            2: "Moyen",
            3: "Bien",
            4: "Tr√®s bien",
            5: "Excellent",
        };

        starButtons.forEach((button) => {
            button.addEventListener("click", (e) => {
                e.preventDefault();
                const rating = parseInt(button.dataset.rating);

                // Mettre √† jour l'affichage
                starButtons.forEach((star, index) => {
                    if (index < rating) {
                        star.classList.remove("text-gray-300");
                        star.classList.add("text-yellow-400");
                    } else {
                        star.classList.remove("text-yellow-400");
                        star.classList.add("text-gray-300");
                    }
                });

                // Mettre √† jour le texte et la valeur
                selectedRating.value = rating;
                ratingText.textContent = ratingLabels[rating];
            });
        });
    }

    // R√©initialiser les √©toiles
    function resetStars() {
        const starButtons = document.querySelectorAll(".star-btn");
        const ratingText = document.getElementById("ratingText");
        const selectedRating = document.getElementById("selectedRating");

        starButtons.forEach((star) => {
            star.classList.remove("text-yellow-400");
            star.classList.add("text-gray-300");
        });

        selectedRating.value = "";
        ratingText.textContent = "";
    }

    // Mettre √† jour le compteur de caract√®res
    function updateCharCount() {
        const commentContent = document.getElementById("commentContent");
        const charCount = document.getElementById("charCount");

        if (commentContent && charCount) {
            const count = commentContent.value.length;
            charCount.textContent = `${count}/1000`;

            if (count > 1000) {
                charCount.classList.add("text-red-500");
            } else {
                charCount.classList.remove("text-red-500");
            }
        }
    }

    // G√©rer la soumission du commentaire
    async function handleCommentSubmit(e) {
        e.preventDefault();

        const commentContent = document.getElementById("commentContent");
        const selectedRating = document.getElementById("selectedRating");
        const commentError = document.getElementById("commentError");
        const submitButton = document.getElementById("submitComment");

        // R√©initialiser les erreurs
        commentError.classList.add("hidden");
        commentError.textContent = "";

        try {
            // V√©rifications
            if (!isLoggedIn()) {
                throw new Error("Vous devez √™tre connect√© pour commenter");
            }

            const content = commentContent.value.trim();
            if (content.length < 10) {
                throw new Error(
                    "Le commentaire doit contenir au moins 10 caract√®res",
                );
            }

            if (content.length > 1000) {
                throw new Error(
                    "Le commentaire ne peut pas d√©passer 1000 caract√®res",
                );
            }

            // D√©sactiver le bouton
            submitButton.disabled = true;
            submitButton.textContent = "‚è≥ Publication...";

            // Pr√©parer les donn√©es
            const commentData = {
                user: getCurrentUser().id,
                recette: currentRecetteId,
                contenu: content,
            };

            // Ajouter la note si s√©lectionn√©e
            if (selectedRating.value) {
                commentData.note = parseInt(selectedRating.value);
            }

            // Envoyer le commentaire
            await pb.collection("commentaires").create(commentData);

            // R√©initialiser le formulaire
            document.getElementById("addCommentForm").reset();
            updateCharCount();
            resetStars();

            // Recharger les commentaires
            await loadComments();

            // Afficher un message de succ√®s
            showNotification("Commentaire publi√© avec succ√®s ! üéâ");
        } catch (error) {
            console.error(
                "Erreur lors de la publication du commentaire:",
                error,
            );
            commentError.textContent = error.message;
            commentError.classList.remove("hidden");
        } finally {
            // R√©activer le bouton
            submitButton.disabled = false;
            submitButton.textContent = "üìù Publier le commentaire";
        }
    }

    // Charger les commentaires
    async function loadComments() {
        const commentsLoading = document.getElementById("commentsLoading");
        const noComments = document.getElementById("noComments");
        const commentsContainer = document.getElementById("commentsContainer");
        const commentCount = document.getElementById("commentCount");

        try {
            commentsLoading?.classList.remove("hidden");
            noComments?.classList.add("hidden");
            commentsContainer?.classList.add("hidden");

            // R√©cup√©rer les commentaires
            const commentaires = await pb
                .collection("commentaires")
                .getFullList({
                    filter: `recette = "${currentRecetteId}"`,
                    expand: "user",
                    sort: "-created",
                });

            // Mettre √† jour le compteur
            if (commentCount) {
                commentCount.textContent = commentaires.length;
            }

            // Cacher le loading
            commentsLoading?.classList.add("hidden");

            if (commentaires.length === 0) {
                noComments?.classList.remove("hidden");
                return;
            }

            // Afficher les commentaires
            if (commentsContainer) {
                commentsContainer.innerHTML = commentaires
                    .map(createCommentHTML)
                    .join("");
                commentsContainer.classList.remove("hidden");
            }
        } catch (error) {
            console.error("Erreur lors du chargement des commentaires:", error);
            commentsLoading?.classList.add("hidden");

            // Afficher un message d'erreur
            if (commentsContainer) {
                const errorDiv = document.createElement("div");
                errorDiv.className = "text-center py-8 bg-red-50 rounded-lg";
                errorDiv.innerHTML = `
                    <div class="text-4xl mb-2">‚ö†Ô∏è</div>
                    <p class="text-red-600">Erreur lors du chargement des commentaires</p>
                `;
                commentsContainer.appendChild(errorDiv);
            }
        }
    }

    // Cr√©er le HTML d'un commentaire
    function createCommentHTML(commentaire) {
        const user = commentaire.expand?.user;
        const userName = user?.pseudo || "Utilisateur anonyme";

        // G√©n√©rer l'avatar
        let avatarHTML = "";
        if (user?.avatar) {
            const avatarUrl = `https://cookit-up.titouan-winkel.fr/api/files/users/${user.id}/${user.avatar}`;
            avatarHTML = `<img src="${avatarUrl}" alt="Avatar de ${userName}" class="w-12 h-12 rounded-full object-cover" />`;
        } else {
            const userInitials = userName.substring(0, 2).toUpperCase();
            avatarHTML = `<div class="w-12 h-12 bg-yellow-500 rounded-full flex items-center justify-center text-white font-bold">${userInitials}</div>`;
        }

        const createdDate = new Date(commentaire.created).toLocaleDateString(
            "fr-FR",
            {
                year: "numeric",
                month: "long",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit",
            },
        );

        const stars = commentaire.note ? "‚≠ê".repeat(commentaire.note) : "";

        const currentUser = getCurrentUser();
        const isOwner = currentUser && currentUser.id === commentaire.user;

        return `
            <div class="bg-gray-50 rounded-lg p-6 border border-gray-200" data-comment-id="${commentaire.id}">
                <div class="flex items-start space-x-4">
                    <!-- Avatar -->
                    ${avatarHTML}
                    
                    <!-- Contenu -->
                    <div class="flex-1">
                        <div class="flex items-center justify-between mb-2">
                            <div>
                                <h4 class="font-bold text-gray-900">${userName}</h4>
                                <p class="text-sm text-gray-500">${createdDate}</p>
                            </div>
                            ${stars ? `<div class="text-lg">${stars}</div>` : ""}
                        </div>
                        
                        <p class="text-gray-800 leading-relaxed">${commentaire.contenu}</p>
                        
                        ${
                            isOwner
                                ? `
                            <div class="mt-4 flex gap-2">
                                <button 
                                    onclick="deleteComment('${commentaire.id}')"
                                    class="text-red-600 hover:text-red-800 text-sm font-medium transition"
                                >
                                    üóëÔ∏è Supprimer
                                </button>
                            </div>
                        `
                                : ""
                        }
                    </div>
                </div>
            </div>
        `;
    }

    // Supprimer un commentaire
    window.deleteComment = async function (commentId) {
        if (!confirm("√ätes-vous s√ªr de vouloir supprimer ce commentaire ?")) {
            return;
        }

        try {
            await pb.collection("commentaires").delete(commentId);
            await loadComments();
            showNotification("Commentaire supprim√© üóëÔ∏è");
        } catch (error) {
            console.error("Erreur lors de la suppression:", error);
            alert("Erreur lors de la suppression du commentaire");
        }
    };

    // Fonction pour afficher une notification
    function showNotification(message) {
        const notification = document.createElement("div");
        notification.className =
            "fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transition-opacity";
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.opacity = "0";
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
</script>
