import PocketBase from 'pocketbase';
const pb = new PocketBase("https://cookit-up.titouan-winkel.fr");

// ‚úÖ R√âCUP√àRE TOUTES LES RECETTES AVEC STATUT FAVORI (VERSION CORRIG√âE)
export async function getAllRecettes() {
    try {
        console.log('üîÑ D√©but de r√©cup√©ration des recettes...');

        // V√©rifier la connexion √† PocketBase
        if (!pb.baseUrl) {
            console.error('‚ùå PocketBase non configur√©');
            return [];
        }

        console.log('üì° Connexion √† PocketBase:', pb.baseUrl);

        // Utiliser getFullList() pour r√©cup√©rer TOUTES les recettes sans limitation
        // ‚úÖ CORRECTION: Mise √† jour des noms de champs pour correspondre √† la structure r√©elle
        const result = await pb.collection('recettes').getFullList({
            sort: '-created',
            fields: 'id,nom,img,temps_prep,categorie,ingredients,preparation,regime,calories,commentaire,sponsorise,created,updated'
        });

        console.log(`‚úÖ ${result.length} recettes r√©cup√©r√©es depuis PocketBase`);

        if (result.length > 0) {
            console.log('üìù Exemple de recette brute:', result[0]);
        }

        // Transformer les donn√©es pour inclure l'URL compl√®te de l'image
        const recettes = result.map(recette => {
            console.log(`üñºÔ∏è Recette ${recette.nom} - img field:`, recette.img);

            // ‚úÖ CORRECTION : V√©rifier si l'URL est d√©j√† compl√®te
            let imageUrl = null;
            if (recette.img) {
                if (recette.img.startsWith('http')) {
                    // L'URL est d√©j√† compl√®te
                    imageUrl = recette.img;
                } else {
                    // Construire l'URL compl√®te
                    imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
                }
            }

            return {
                id: recette.id,
                nom: recette.nom,
                img: imageUrl,
                temps_prep: recette.temps_prep,
                categorie: recette.categorie,
                ingredients: recette.ingredients || [],
                preparation: recette.preparation || "",
                regime: recette.regime || [],
                calories: recette.calories || 0,
                commentaire: recette.commentaire || "",
                sponsorise: recette.sponsorise || false,
                created: recette.created,
                updated: recette.updated,
                isFavorite: false // Par d√©faut, sera mis √† jour c√¥t√© client si l'utilisateur est connect√©
            };
        });

        console.log('üçΩÔ∏è Exemple de recette transform√©e:', recettes[0]);

        return recettes;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des recettes:', error);
        console.error('D√©tails de l\'erreur:', error);

        // Retourner des donn√©es de d√©monstration en cas d'erreur
        console.log('üîÑ Utilisation des donn√©es de d√©monstration...');
        return getDemoRecettes();
    }
}

// ‚úÖ R√âCUP√àRE UNE RECETTE SP√âCIFIQUE PAR ID
export async function getRecetteById(id) {
    try {
        console.log(`üîç Recherche de la recette avec l'ID: ${id}`);

        const recette = await pb.collection('recettes').getOne(id, {
            expand: 'commentaires(recette).user'
        });

        console.log('‚úÖ Recette trouv√©e:', recette.nom);
        console.log('üìù Donn√©es brutes de la recette:', recette);

        // ‚úÖ CORRECTION : V√©rifier si l'URL est d√©j√† compl√®te
        let imageUrl = null;
        if (recette.img) {
            if (recette.img.startsWith('http')) {
                imageUrl = recette.img;
            } else {
                imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
            }
        }

        // Transformer les donn√©es
        const recetteComplete = {
            id: recette.id,
            nom: recette.nom,
            img: imageUrl,
            temps_prep: recette.temps_prep,
            categorie: recette.categorie,
            ingredients: recette.ingredients || [],
            preparation: recette.preparation || "",
            regime: recette.regime || [],
            calories: recette.calories || 0,
            commentaire: recette.commentaire || "",
            sponsorise: recette.sponsorise || false,
            created: recette.created,
            updated: recette.updated,
            commentaires: recette.expand?.['commentaires(recette)'] || []
        };

        return recetteComplete;

    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration de la recette ${id}:`, error);

        // Retourner une recette de d√©monstration
        return getDemoRecetteById(id);
    }
}

// ‚úÖ R√âCUP√àRE LES INGR√âDIENTS PAR LEURS IDS
export async function getIngredientsByIds(ingredientIds) {
    try {
        if (!ingredientIds || !Array.isArray(ingredientIds) || ingredientIds.length === 0) {
            return [];
        }

        console.log(`ü•ï R√©cup√©ration des ingr√©dients par IDs: ${ingredientIds.join(', ')}`);

        // Cr√©er un filtre pour tous les IDs
        const filter = ingredientIds.map(id => `id = "${id}"`).join(' || ');

        const ingredients = await pb.collection('ingredients').getFullList({
            filter: filter,
            fields: 'id,nom'
        });

        console.log(`‚úÖ ${ingredients.length} ingr√©dients r√©cup√©r√©s`);

        // Cr√©er un mapping des IDs aux noms pour pr√©server l'ordre
        const ingredientsMap = {};
        ingredients.forEach(ing => {
            ingredientsMap[ing.id] = ing.nom;
        });

        // Retourner les noms dans le m√™me ordre que les IDs
        return ingredientIds.map(id => ingredientsMap[id] || "Ingr√©dient inconnu");

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des ingr√©dients:', error);
        return ingredientIds.map(() => "Ingr√©dient");
    }
}

// ‚úÖ R√âCUP√àRE LES RECETTES SIMILAIRES √Ä UNE RECETTE DONN√âE
export async function getRecettesSimilaires(recetteId, limit = 4) {
    try {
        console.log(`üîç Recherche de recettes similaires √† la recette ${recetteId}...`);

        // R√©cup√©rer la recette principale pour conna√Ætre sa cat√©gorie
        const recettePrincipale = await pb.collection('recettes').getOne(recetteId, {
            fields: 'id,categorie,regime'
        });

        console.log(`‚úÖ Recette principale r√©cup√©r√©e: ${recettePrincipale.id}`);

        // Construire le filtre pour trouver des recettes similaires
        let filterParts = [];

        // Exclure la recette principale
        filterParts.push(`id != "${recetteId}"`);

        // Filtrer par cat√©gorie si disponible
        if (recettePrincipale.categorie) {
            filterParts.push(`categorie = "${recettePrincipale.categorie}"`);
        }

        // Filtrer par r√©gime si disponible
        if (recettePrincipale.regime && recettePrincipale.regime.length > 0) {
            const regimeFilters = recettePrincipale.regime.map(regime => `regime ?~ "${regime}"`);
            if (regimeFilters.length > 0) {
                filterParts.push(`(${regimeFilters.join(' || ')})`);
            }
        }

        // Combiner les filtres
        const filter = filterParts.join(' && ');

        console.log(`üîç Filtre pour recettes similaires: ${filter}`);

        // R√©cup√©rer les recettes similaires
        const recettesSimilaires = await pb.collection('recettes').getList(1, limit, {
            filter: filter,
            sort: 'created',
            fields: 'id,nom,img,temps_prep,categorie,ingredients,regime,calories,sponsorise,created'
        });

        console.log(`‚úÖ ${recettesSimilaires.items.length} recettes similaires trouv√©es`);

        // Si on n'a pas assez de recettes similaires, compl√©ter avec des recettes al√©atoires
        let recettes = [...recettesSimilaires.items];

        if (recettes.length < limit) {
            console.log(`‚ö†Ô∏è Pas assez de recettes similaires, ajout de recettes al√©atoires...`);

            // R√©cup√©rer des recettes al√©atoires (en excluant la recette principale et celles d√©j√† trouv√©es)
            const idsExclus = [recetteId, ...recettes.map(r => r.id)];
            const filtreAleatoire = `id != "${idsExclus.join('" && id != "')}"`;

            const recettesAleatoires = await pb.collection('recettes').getList(1, limit - recettes.length, {
                filter: filtreAleatoire,
                sort: 'random()',
                fields: 'id,nom,img,temps_prep,categorie,ingredients,regime,calories,sponsorise,created'
            });

            recettes = [...recettes, ...recettesAleatoires.items];
            console.log(`‚úÖ ${recettesAleatoires.items.length} recettes al√©atoires ajout√©es`);
        }

        // Transformer les donn√©es pour le format attendu par le composant Plat
        const recettesTransformees = recettes.map(recette => {
            // ‚úÖ CORRECTION : V√©rifier si l'URL est d√©j√† compl√®te
            let imageUrl = null;
            if (recette.img) {
                if (recette.img.startsWith('http')) {
                    imageUrl = recette.img;
                } else {
                    imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
                }
            }

            return {
                id: recette.id,
                nom: recette.nom,
                img: imageUrl,
                temps_prep: recette.temps_prep,
                categorie: recette.categorie,
                ingredients: recette.ingredients || [],
                regime: recette.regime || [],
                calories: recette.calories || 0,
                sponsorise: recette.sponsorise || false,
                created: recette.created,
                isFavorite: false // Sera mis √† jour c√¥t√© client si n√©cessaire
            };
        });

        // V√©rifier le statut favori des recettes si un utilisateur est connect√©
        const authData = pb.authStore.model;
        if (authData) {
            const userId = authData.id;
            const recetteIds = recettesTransformees.map(r => r.id);
            const favoriteStatus = await checkFavoriteStatus(recetteIds, userId);

            // Mettre √† jour le statut favori
            recettesTransformees.forEach(recette => {
                recette.isFavorite = favoriteStatus[recette.id] || false;
            });
        }

        return recettesTransformees;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des recettes similaires:', error);

        // En cas d'erreur, retourner un tableau vide
        return [];
    }
}

// Conserver les autres fonctions existantes...
export async function getCommentairesByRecette(recetteId) {
    try {
        console.log(`üí¨ R√©cup√©ration des commentaires pour la recette ${recetteId}`);

        const commentaires = await pb.collection('commentaires').getFullList({
            filter: `recette = "${recetteId}"`,
            expand: 'user',
            sort: '-created'
        });

        console.log(`‚úÖ ${commentaires.length} commentaires r√©cup√©r√©s`);

        // Transformer les donn√©es des commentaires
        const commentairesTransformes = commentaires.map(commentaire => ({
            id: commentaire.id,
            contenu: commentaire.contenu,
            note: commentaire.note,
            created: commentaire.created,
            user: {
                id: commentaire.expand?.user?.id,
                pseudo: commentaire.expand?.user?.pseudo || 'Utilisateur anonyme',
                avatar: commentaire.expand?.user?.avatar ?
                    `https://cookit-up.titouan-winkel.fr/api/files/users/${commentaire.expand.user.id}/${commentaire.expand.user.avatar}` :
                    null
            }
        }));

        return commentairesTransformes;

    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration des commentaires:`, error);
        return [];
    }
}

export async function ajouterCommentaire(recetteId, userId, contenu, note = null) {
    try {
        console.log(`üí¨ Ajout d'un commentaire pour la recette ${recetteId}`);

        const commentaireData = {
            recette: recetteId,
            user: userId,
            contenu: contenu
        };

        if (note !== null && note >= 1 && note <= 5) {
            commentaireData.note = note;
        }

        const nouveauCommentaire = await pb.collection('commentaires').create(commentaireData);

        console.log('‚úÖ Commentaire ajout√© avec succ√®s:', nouveauCommentaire.id);

        return nouveauCommentaire;

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ajout du commentaire:', error);
        throw error;
    }
}

export async function toggleFavori(recetteId, userId) {
    try {
        console.log(`‚ù§Ô∏è Toggle favori pour recette ${recetteId} et utilisateur ${userId}`);

        // V√©rifier si le favori existe d√©j√†
        const favorisExistants = await pb.collection('favoris').getFullList({
            filter: `recette = "${recetteId}" && user = "${userId}"`
        });

        if (favorisExistants.length > 0) {
            // Supprimer le favori
            await pb.collection('favoris').delete(favorisExistants[0].id);
            console.log('üíî Favori supprim√©');
            return { action: 'removed', isFavorite: false };
        } else {
            // Ajouter le favori
            const nouveauFavori = await pb.collection('favoris').create({
                recette: recetteId,
                user: userId
            });
            console.log('‚ù§Ô∏è Favori ajout√©');
            return { action: 'added', isFavorite: true };
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la gestion du favori:', error);
        throw error;
    }
}

export async function getFavorisByUser(userId) {
    try {
        console.log(`‚ù§Ô∏è R√©cup√©ration des favoris pour l'utilisateur ${userId}`);

        const favoris = await pb.collection('favoris').getFullList({
            filter: `user = "${userId}"`,
            expand: 'recette',
            sort: '-created'
        });

        console.log(`‚úÖ ${favoris.length} favoris r√©cup√©r√©s`);

        // Transformer les donn√©es
        const recettesFavorites = favoris.map(favori => {
            const recette = favori.expand?.recette;
            if (!recette) return null;

            // ‚úÖ CORRECTION : V√©rifier si l'URL est d√©j√† compl√®te
            let imageUrl = null;
            if (recette.img) {
                if (recette.img.startsWith('http')) {
                    imageUrl = recette.img;
                } else {
                    imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
                }
            }

            return {
                id: recette.id,
                nom: recette.nom,
                description: recette.description,
                img: imageUrl,
                temps_prep: recette.temps_prep,
                categorie: recette.categorie,
                created: recette.created,
                updated: recette.updated,
                isFavorite: true,
                favoriId: favori.id,
                favoriDate: favori.created
            };
        }).filter(Boolean); // Supprimer les entr√©es null

        return recettesFavorites;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des favoris:', error);
        return [];
    }
}

export async function checkFavoriteStatus(recetteIds, userId) {
    try {
        if (!userId || !recetteIds || recetteIds.length === 0) {
            return {};
        }

        console.log(`üîç V√©rification du statut favori pour ${recetteIds.length} recettes`);

        // Cr√©er un filtre pour toutes les recettes
        const recetteFilter = recetteIds.map(id => `recette = "${id}"`).join(' || ');
        const filter = `(${recetteFilter}) && user = "${userId}"`;

        const favoris = await pb.collection('favoris').getFullList({
            filter: filter,
            fields: 'recette'
        });

        // Cr√©er un objet de mapping
        const favoriteStatus = {};
        recetteIds.forEach(id => {
            favoriteStatus[id] = favoris.some(favori => favori.recette === id);
        });

        console.log(`‚úÖ Statut favori v√©rifi√© pour ${Object.keys(favoriteStatus).length} recettes`);

        return favoriteStatus;

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification du statut favori:', error);
        return {};
    }
}

export async function getRecettesByUser(userId) {
    try {
        console.log(`üë®‚Äçüç≥ R√©cup√©ration des recettes cr√©√©es par l'utilisateur ${userId}`);

        const recettes = await pb.collection('recettes').getFullList({
            filter: `user = "${userId}"`,
            sort: '-created'
        });

        console.log(`‚úÖ ${recettes.length} recettes cr√©√©es par l'utilisateur`);

        // Transformer les donn√©es
        const recettesTransformees = recettes.map(recette => {
            // ‚úÖ CORRECTION : V√©rifier si l'URL est d√©j√† compl√®te
            let imageUrl = null;
            if (recette.img) {
                if (recette.img.startsWith('http')) {
                    imageUrl = recette.img;
                } else {
                    imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
                }
            }

            return {
                id: recette.id,
                nom: recette.nom,
                description: recette.description,
                img: imageUrl,
                temps_prep: recette.temps_prep,
                categorie: recette.categorie,
                created: recette.created,
                updated: recette.updated,
                isFavorite: false // Sera mis √† jour c√¥t√© client
            };
        });

        return recettesTransformees;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des recettes utilisateur:', error);
        return [];
    }
}

export async function creerRecette(recetteData, userId) {
    try {
        console.log('üë®‚Äçüç≥ Cr√©ation d\'une nouvelle recette...');

        const nouvelleRecette = await pb.collection('recettes').create({
            ...recetteData,
            user: userId
        });

        console.log('‚úÖ Recette cr√©√©e avec succ√®s:', nouvelleRecette.id);

        return nouvelleRecette;

    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation de la recette:', error);
        throw error;
    }
}

export async function modifierRecette(recetteId, recetteData, userId) {
    try {
        console.log(`‚úèÔ∏è Modification de la recette ${recetteId}...`);

        // V√©rifier que l'utilisateur est le propri√©taire de la recette
        const recette = await pb.collection('recettes').getOne(recetteId);

        if (recette.user !== userId) {
            throw new Error('Vous n\'√™tes pas autoris√© √† modifier cette recette');
        }

        const recetteModifiee = await pb.collection('recettes').update(recetteId, recetteData);

        console.log('‚úÖ Recette modifi√©e avec succ√®s');

        return recetteModifiee;

    } catch (error) {
        console.error('‚ùå Erreur lors de la modification de la recette:', error);
        throw error;
    }
}

export async function supprimerRecette(recetteId, userId) {
    try {
        console.log(`üóëÔ∏è Suppression de la recette ${recetteId}...`);

        // V√©rifier que l'utilisateur est le propri√©taire de la recette
        const recette = await pb.collection('recettes').getOne(recetteId);

        if (recette.user !== userId) {
            throw new Error('Vous n\'√™tes pas autoris√© √† supprimer cette recette');
        }

        await pb.collection('recettes').delete(recetteId);

        console.log('‚úÖ Recette supprim√©e avec succ√®s');

        return true;

    } catch (error) {
        console.error('‚ùå Erreur lors de la suppression de la recette:', error);
        throw error;
    }
}

export async function rechercherRecettes(query, filters = {}) {
    try {
        console.log(`üîç Recherche de recettes avec la requ√™te: "${query}"`);

        let filter = '';
        const filterParts = [];

        // Recherche textuelle
        if (query && query.trim()) {
            filterParts.push(`(nom ~ "${query}" || description ~ "${query}")`);
        }

        // Filtres additionnels
        if (filters.difficulte) {
            filterParts.push(`difficulte = "${filters.difficulte}"`);
        }

        if (filters.temps_max) {
            filterParts.push(`temps_preparation <= ${filters.temps_max}`);
        }

        // Combiner les filtres
        if (filterParts.length > 0) {
            filter = filterParts.join(' && ');
        }

        const recettes = await pb.collection('recettes').getFullList({
            filter: filter,
            sort: '-created'
        });

        console.log(`‚úÖ ${recettes.length} recettes trouv√©es`);

        // Transformer les donn√©es
        const recettesTransformees = recettes.map(recette => {
            // ‚úÖ CORRECTION : V√©rifier si l'URL est d√©j√† compl√®te
            let imageUrl = null;
            if (recette.img) {
                if (recette.img.startsWith('http')) {
                    imageUrl = recette.img;
                } else {
                    imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
                }
            }

            return {
                id: recette.id,
                nom: recette.nom,
                description: recette.description,
                img: imageUrl,
                temps_prep: recette.temps_prep,
                categorie: recette.categorie,
                created: recette.created,
                updated: recette.updated,
                isFavorite: false
            };
        });

        return recettesTransformees;

    } catch (error) {
        console.error('‚ùå Erreur lors de la recherche:', error);
        return [];
    }
}

export async function getPartenaires() {
    try {
        console.log('üè™ R√©cup√©ration des partenaires depuis:', pb.baseUrl);

        // R√©cup√©rer tous les partenaires
        const partenaires = await pb.collection('partenaires').getFullList({
            sort: 'nom'
        });

        console.log(`‚úÖ ${partenaires.length} partenaires r√©cup√©r√©s depuis PocketBase`);
        console.log('üìä Premier partenaire brut:', partenaires[0]);

        // Transformer les donn√©es avec les vrais noms de champs
        const partenairesTransformes = partenaires.map(partenaire => {
            console.log(`üîÑ Transformation du partenaire: ${partenaire.nom}`);

            return {
                id: partenaire.id,
                nom: partenaire.nom || '',
                description: partenaire.description || '',
                adresse: partenaire.adresse || '',
                latitude: partenaire.latitude || null,
                longitude: partenaire.longitude || null,
                ville: partenaire.ville || '',
                code_postal: partenaire.code_postal || '',
                region: partenaire.region || '',
                telephone: partenaire.telephone || '',
                horaires: partenaire.horaires || '',
                reduction: partenaire.reduction || '',
                code_promo: partenaire.code_promo || '',
                validite_offre: partenaire.validite_offre || '',
                categories: partenaire.categories || [],
                logo: partenaire.logo ? `${pb.baseUrl}/api/files/partenaires/${partenaire.id}/${partenaire.logo}` : null,
                image: partenaire.image ? `${pb.baseUrl}/api/files/partenaires/${partenaire.id}/${partenaire.image}` : null,
                created: partenaire.created,
                updated: partenaire.updated
            };
        });

        console.log('üçΩÔ∏è Premier partenaire transform√©:', partenairesTransformes[0]);

        return partenairesTransformes;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des partenaires:', error);
        console.error('D√©tails de l\'erreur:', {
            message: error.message,
            status: error.status,
            data: error.data
        });

        // En cas d'erreur, retourner un tableau vide au lieu des donn√©es de d√©mo
        // pour voir si le probl√®me vient de la r√©cup√©ration des donn√©es
        return [];
    }
}

export async function getAllPartenaires() {
    return await getPartenaires();
}

export async function getRecettesSponsors() {
    try {
        // Pour l'instant, retourner les premi√®res recettes comme "sponsoris√©es"
        const recettes = await getAllRecettes();
        return recettes.slice(0, 6);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des recettes sponsoris√©es:', error);
        return [];
    }
}

// ‚úÖ R√âCUP√àRE LES RECETTES COMMENT√âES PAR L'UTILISATEUR CONNECT√â
export async function getCommentedRecettes() {
    try {
        console.log('üí¨ R√©cup√©ration des recettes comment√©es par l\'utilisateur...');

        // V√©rifier si un utilisateur est connect√©
        const authData = pb.authStore.model;
        if (!authData) {
            console.log('‚ùå Aucun utilisateur connect√©');
            return [];
        }

        const userId = authData.id;
        console.log(`üë§ Utilisateur connect√©: ${userId}`);

        // R√©cup√©rer les commentaires de l'utilisateur
        const commentaires = await pb.collection('commentaires').getFullList({
            filter: `user = "${userId}"`,
            expand: 'recette',
            sort: '-created'
        });

        console.log(`‚úÖ ${commentaires.length} commentaires r√©cup√©r√©s`);

        // Extraire les recettes uniques des commentaires
        const recettesMap = new Map();

        commentaires.forEach(commentaire => {
            if (commentaire.expand?.recette) {
                const recette = commentaire.expand.recette;
                // Ne pas ajouter de doublons (si l'utilisateur a comment√© plusieurs fois la m√™me recette)
                if (!recettesMap.has(recette.id)) {
                    recettesMap.set(recette.id, recette);
                }
            }
        });

        // Transformer les donn√©es pour le format attendu par le composant Plat
        const recettesCommentees = Array.from(recettesMap.values()).map(recette => {
            // ‚úÖ CORRECTION : V√©rifier si l'URL est d√©j√† compl√®te
            let imageUrl = null;
            if (recette.img) {
                if (recette.img.startsWith('http')) {
                    imageUrl = recette.img;
                } else {
                    imageUrl = `https://cookit-up.titouan-winkel.fr/api/files/recettes/${recette.id}/${recette.img}`;
                }
            }

            return {
                id: recette.id,
                nom: recette.nom,
                description: recette.description,
                img: imageUrl,
                temps_prep: recette.temps_prep,
                categorie: recette.categorie,
                created: recette.created,
                updated: recette.updated,
                isFavorite: false, // Sera mis √† jour c√¥t√© client
                commentDate: commentaires.find(c => c.recette === recette.id)?.created
            };
        });

        console.log(`üçΩÔ∏è ${recettesCommentees.length} recettes comment√©es r√©cup√©r√©es`);

        // V√©rifier le statut favori des recettes si l'utilisateur est connect√©
        if (userId) {
            const recetteIds = recettesCommentees.map(r => r.id);
            const favoriteStatus = await checkFavoriteStatus(recetteIds, userId);

            // Mettre √† jour le statut favori
            recettesCommentees.forEach(recette => {
                recette.isFavorite = favoriteStatus[recette.id] || false;
            });
        }

        return recettesCommentees;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des recettes comment√©es:', error);
        return [];
    }
}

// ‚úÖ DONN√âES DE D√âMONSTRATION (FALLBACK)
function getDemoRecettes() {
    return [
        {
            id: 'demo-1',
            nom: 'P√¢tes √† la Carbonara',
            description: 'Un classique italien avec des ≈ìufs, du parmesan et des lardons.',
            img: '/placeholder.svg?height=300&width=400&text=Carbonara',
            temps_prep: "20 min",
            categorie: 'plat',
            ingredients: ['p√¢tes', 'lardons', '≈ìufs', 'parmesan'],
            preparation: 'Faire cuire les p√¢tes...',
            regime: [],
            calories: 450,
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            isFavorite: false
        },
        {
            id: 'demo-2',
            nom: 'Salade C√©sar',
            description: 'Salade fra√Æche avec cro√ªtons, parmesan et sauce C√©sar maison.',
            img: '/placeholder.svg?height=300&width=400&text=Salade+C√©sar',
            temps_prep: "15 min",
            categorie: 'entree',
            ingredients: ['salade', 'cro√ªtons', 'parmesan', 'sauce c√©sar'],
            preparation: 'Laver la salade...',
            regime: ['v√©g√©tarien'],
            calories: 250,
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            isFavorite: false
        },
        {
            id: 'demo-3',
            nom: 'B≈ìuf Bourguignon',
            description: 'Plat traditionnel fran√ßais mijot√© au vin rouge.',
            img: '/placeholder.svg?height=300&width=400&text=B≈ìuf+Bourguignon',
            temps_prep: "180 min",
            categorie: 'plat',
            ingredients: ['b≈ìuf', 'vin rouge', 'carottes', 'oignons'],
            preparation: 'Faire revenir le b≈ìuf...',
            regime: [],
            calories: 650,
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            isFavorite: false
        }
    ];
}

function getDemoRecetteById(id) {
    const demoRecettes = getDemoRecettes();
    const recette = demoRecettes.find(r => r.id === id);

    if (recette) {
        return {
            ...recette,
            ingredients: [
                '200g de p√¢tes',
                '100g de lardons',
                '2 ≈ìufs',
                '50g de parmesan r√¢p√©',
                'Poivre noir'
            ],
            preparation: `Faire cuire les p√¢tes dans l'eau bouillante sal√©e.

Faire revenir les lardons dans une po√™le.

Battre les ≈ìufs avec le parmesan.

M√©langer les p√¢tes chaudes avec les ≈ìufs.

Ajouter les lardons et servir imm√©diatement.`,
            commentaires: []
        };
    }

    return null;
}
