import pb from './lib/pocketbase.js';

// ‚úÖ R√âCUP√àRE TOUTES LES RECETTES AVEC STATUT FAVORI (VERSION CORRIG√âE)
export async function getAllRecettes() {
    try {
        console.log('üîÑ D√©but de r√©cup√©ration des recettes...');

        // V√©rifier la connexion √† PocketBase
        if (!pb.baseUrl) {
            console.error('‚ùå PocketBase non configur√©');
            return [];
        }

        console.log('üì° Connexion √† PocketBase:', pb.baseUrl);

        // Utiliser getFullList() pour r√©cup√©rer TOUTES les recettes sans limitation
        const result = await pb.collection('recettes').getFullList({
            sort: '-created',
            fields: 'id,nom,description,image,temps_preparation,difficulte,created,updated'
        });

        console.log(`‚úÖ ${result.length} recettes r√©cup√©r√©es depuis PocketBase`);

        // Transformer les donn√©es pour inclure l'URL compl√®te de l'image
        const recettes = result.map(recette => ({
            id: recette.id,
            nom: recette.nom,
            description: recette.description,
            image: recette.image ? `http://127.0.0.1:8090/api/files/recettes/${recette.id}/${recette.image}` : null,
            temps_preparation: recette.temps_preparation,
            difficulte: recette.difficulte,
            created: recette.created,
            updated: recette.updated,
            isFavorite: false // Par d√©faut, sera mis √† jour c√¥t√© client si l'utilisateur est connect√©
        }));

        console.log('üçΩÔ∏è Exemple de recette transform√©e:', recettes[0]);

        return recettes;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des recettes:', error);

        // Retourner des donn√©es de d√©monstration en cas d'erreur
        console.log('üîÑ Utilisation des donn√©es de d√©monstration...');
        return getDemoRecettes();
    }
}

// ‚úÖ R√âCUP√àRE UNE RECETTE SP√âCIFIQUE PAR ID
export async function getRecetteById(id) {
    try {
        console.log(`üîç Recherche de la recette avec l'ID: ${id}`);

        const recette = await pb.collection('recettes').getOne(id, {
            expand: 'commentaires(recette).user'
        });

        console.log('‚úÖ Recette trouv√©e:', recette.nom);

        // Transformer les donn√©es
        const recetteComplete = {
            id: recette.id,
            nom: recette.nom,
            description: recette.description,
            image: recette.image ? `http://127.0.0.1:8090/api/files/recettes/${recette.id}/${recette.image}` : null,
            temps_preparation: recette.temps_preparation,
            difficulte: recette.difficulte,
            ingredients: recette.ingredients || [],
            instructions: recette.instructions || [],
            created: recette.created,
            updated: recette.updated,
            commentaires: recette.expand?.['commentaires(recette)'] || []
        };

        return recetteComplete;

    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration de la recette ${id}:`, error);

        // Retourner une recette de d√©monstration
        return getDemoRecetteById(id);
    }
}

// ‚úÖ R√âCUP√àRE LES COMMENTAIRES D'UNE RECETTE
export async function getCommentairesByRecette(recetteId) {
    try {
        console.log(`üí¨ R√©cup√©ration des commentaires pour la recette ${recetteId}`);

        const commentaires = await pb.collection('commentaires').getFullList({
            filter: `recette = "${recetteId}"`,
            expand: 'user',
            sort: '-created'
        });

        console.log(`‚úÖ ${commentaires.length} commentaires r√©cup√©r√©s`);

        // Transformer les donn√©es des commentaires
        const commentairesTransformes = commentaires.map(commentaire => ({
            id: commentaire.id,
            contenu: commentaire.contenu,
            note: commentaire.note,
            created: commentaire.created,
            user: {
                id: commentaire.expand?.user?.id,
                pseudo: commentaire.expand?.user?.pseudo || 'Utilisateur anonyme',
                avatar: commentaire.expand?.user?.avatar ?
                    `http://127.0.0.1:8090/api/files/users/${commentaire.expand.user.id}/${commentaire.expand.user.avatar}` :
                    null
            }
        }));

        return commentairesTransformes;

    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration des commentaires:`, error);
        return [];
    }
}

// ‚úÖ AJOUTE UN COMMENTAIRE √Ä UNE RECETTE
export async function ajouterCommentaire(recetteId, userId, contenu, note = null) {
    try {
        console.log(`üí¨ Ajout d'un commentaire pour la recette ${recetteId}`);

        const commentaireData = {
            recette: recetteId,
            user: userId,
            contenu: contenu
        };

        if (note !== null && note >= 1 && note <= 5) {
            commentaireData.note = note;
        }

        const nouveauCommentaire = await pb.collection('commentaires').create(commentaireData);

        console.log('‚úÖ Commentaire ajout√© avec succ√®s:', nouveauCommentaire.id);

        return nouveauCommentaire;

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ajout du commentaire:', error);
        throw error;
    }
}

// ‚úÖ G√àRE LES FAVORIS (AJOUTER/SUPPRIMER)
export async function toggleFavori(recetteId, userId) {
    try {
        console.log(`‚ù§Ô∏è Toggle favori pour recette ${recetteId} et utilisateur ${userId}`);

        // V√©rifier si le favori existe d√©j√†
        const favorisExistants = await pb.collection('favoris').getFullList({
            filter: `recette = "${recetteId}" && user = "${userId}"`
        });

        if (favorisExistants.length > 0) {
            // Supprimer le favori
            await pb.collection('favoris').delete(favorisExistants[0].id);
            console.log('üíî Favori supprim√©');
            return { action: 'removed', isFavorite: false };
        } else {
            // Ajouter le favori
            const nouveauFavori = await pb.collection('favoris').create({
                recette: recetteId,
                user: userId
            });
            console.log('‚ù§Ô∏è Favori ajout√©');
            return { action: 'added', isFavorite: true };
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la gestion du favori:', error);
        throw error;
    }
}

// ‚úÖ R√âCUP√àRE LES FAVORIS D'UN UTILISATEUR
export async function getFavorisByUser(userId) {
    try {
        console.log(`‚ù§Ô∏è R√©cup√©ration des favoris pour l'utilisateur ${userId}`);

        const favoris = await pb.collection('favoris').getFullList({
            filter: `user = "${userId}"`,
            expand: 'recette',
            sort: '-created'
        });

        console.log(`‚úÖ ${favoris.length} favoris r√©cup√©r√©s`);

        // Transformer les donn√©es
        const recettesFavorites = favoris.map(favori => {
            const recette = favori.expand?.recette;
            if (!recette) return null;

            return {
                id: recette.id,
                nom: recette.nom,
                description: recette.description,
                image: recette.image ? `http://127.0.0.1:8090/api/files/recettes/${recette.id}/${recette.image}` : null,
                temps_preparation: recette.temps_preparation,
                difficulte: recette.difficulte,
                created: recette.created,
                updated: recette.updated,
                isFavorite: true,
                favoriId: favori.id,
                favoriDate: favori.created
            };
        }).filter(Boolean); // Supprimer les entr√©es null

        return recettesFavorites;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des favoris:', error);
        return [];
    }
}

// ‚úÖ V√âRIFIE QUELLES RECETTES SONT EN FAVORIS POUR UN UTILISATEUR
export async function checkFavoriteStatus(recetteIds, userId) {
    try {
        if (!userId || !recetteIds || recetteIds.length === 0) {
            return {};
        }

        console.log(`üîç V√©rification du statut favori pour ${recetteIds.length} recettes`);

        // Cr√©er un filtre pour toutes les recettes
        const recetteFilter = recetteIds.map(id => `recette = "${id}"`).join(' || ');
        const filter = `(${recetteFilter}) && user = "${userId}"`;

        const favoris = await pb.collection('favoris').getFullList({
            filter: filter,
            fields: 'recette'
        });

        // Cr√©er un objet de mapping
        const favoriteStatus = {};
        recetteIds.forEach(id => {
            favoriteStatus[id] = favoris.some(favori => favori.recette === id);
        });

        console.log(`‚úÖ Statut favori v√©rifi√© pour ${Object.keys(favoriteStatus).length} recettes`);

        return favoriteStatus;

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification du statut favori:', error);
        return {};
    }
}

// ‚úÖ DONN√âES DE D√âMONSTRATION (FALLBACK)
function getDemoRecettes() {
    return [
        {
            id: 'demo-1',
            nom: 'P√¢tes √† la Carbonara',
            description: 'Un classique italien avec des ≈ìufs, du parmesan et des lardons.',
            image: '/placeholder.svg?height=300&width=400&text=Carbonara',
            temps_preparation: 20,
            difficulte: 'Facile',
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            isFavorite: false
        },
        {
            id: 'demo-2',
            nom: 'Salade C√©sar',
            description: 'Salade fra√Æche avec cro√ªtons, parmesan et sauce C√©sar maison.',
            image: '/placeholder.svg?height=300&width=400&text=Salade+C√©sar',
            temps_preparation: 15,
            difficulte: 'Facile',
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            isFavorite: false
        },
        {
            id: 'demo-3',
            nom: 'B≈ìuf Bourguignon',
            description: 'Plat traditionnel fran√ßais mijot√© au vin rouge.',
            image: '/placeholder.svg?height=300&width=400&text=B≈ìuf+Bourguignon',
            temps_preparation: 180,
            difficulte: 'Difficile',
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            isFavorite: false
        }
    ];
}

function getDemoRecetteById(id) {
    const demoRecettes = getDemoRecettes();
    const recette = demoRecettes.find(r => r.id === id);

    if (recette) {
        return {
            ...recette,
            ingredients: [
                '200g de p√¢tes',
                '100g de lardons',
                '2 ≈ìufs',
                '50g de parmesan r√¢p√©',
                'Poivre noir'
            ],
            instructions: [
                'Faire cuire les p√¢tes dans l\'eau bouillante sal√©e.',
                'Faire revenir les lardons dans une po√™le.',
                'Battre les ≈ìufs avec le parmesan.',
                'M√©langer les p√¢tes chaudes avec les ≈ìufs.',
                'Ajouter les lardons et servir imm√©diatement.'
            ],
            commentaires: []
        };
    }

    return null;
}

// ‚úÖ R√âCUP√àRE LES RECETTES CR√â√âES PAR UN UTILISATEUR
export async function getRecettesByUser(userId) {
    try {
        console.log(`üë®‚Äçüç≥ R√©cup√©ration des recettes cr√©√©es par l'utilisateur ${userId}`);

        const recettes = await pb.collection('recettes').getFullList({
            filter: `user = "${userId}"`,
            sort: '-created'
        });

        console.log(`‚úÖ ${recettes.length} recettes cr√©√©es par l'utilisateur`);

        // Transformer les donn√©es
        const recettesTransformees = recettes.map(recette => ({
            id: recette.id,
            nom: recette.nom,
            description: recette.description,
            image: recette.image ? `http://127.0.0.1:8090/api/files/recettes/${recette.id}/${recette.image}` : null,
            temps_preparation: recette.temps_preparation,
            difficulte: recette.difficulte,
            created: recette.created,
            updated: recette.updated,
            isFavorite: false // Sera mis √† jour c√¥t√© client
        }));

        return recettesTransformees;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des recettes utilisateur:', error);
        return [];
    }
}

// ‚úÖ CR√âE UNE NOUVELLE RECETTE
export async function creerRecette(recetteData, userId) {
    try {
        console.log('üë®‚Äçüç≥ Cr√©ation d\'une nouvelle recette...');

        const nouvelleRecette = await pb.collection('recettes').create({
            ...recetteData,
            user: userId
        });

        console.log('‚úÖ Recette cr√©√©e avec succ√®s:', nouvelleRecette.id);

        return nouvelleRecette;

    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation de la recette:', error);
        throw error;
    }
}

// ‚úÖ MET √Ä JOUR UNE RECETTE EXISTANTE
export async function modifierRecette(recetteId, recetteData, userId) {
    try {
        console.log(`‚úèÔ∏è Modification de la recette ${recetteId}...`);

        // V√©rifier que l'utilisateur est le propri√©taire de la recette
        const recette = await pb.collection('recettes').getOne(recetteId);

        if (recette.user !== userId) {
            throw new Error('Vous n\'√™tes pas autoris√© √† modifier cette recette');
        }

        const recetteModifiee = await pb.collection('recettes').update(recetteId, recetteData);

        console.log('‚úÖ Recette modifi√©e avec succ√®s');

        return recetteModifiee;

    } catch (error) {
        console.error('‚ùå Erreur lors de la modification de la recette:', error);
        throw error;
    }
}

// ‚úÖ SUPPRIME UNE RECETTE
export async function supprimerRecette(recetteId, userId) {
    try {
        console.log(`üóëÔ∏è Suppression de la recette ${recetteId}...`);

        // V√©rifier que l'utilisateur est le propri√©taire de la recette
        const recette = await pb.collection('recettes').getOne(recetteId);

        if (recette.user !== userId) {
            throw new Error('Vous n\'√™tes pas autoris√© √† supprimer cette recette');
        }

        await pb.collection('recettes').delete(recetteId);

        console.log('‚úÖ Recette supprim√©e avec succ√®s');

        return true;

    } catch (error) {
        console.error('‚ùå Erreur lors de la suppression de la recette:', error);
        throw error;
    }
}

// ‚úÖ RECHERCHE DE RECETTES
export async function rechercherRecettes(query, filters = {}) {
    try {
        console.log(`üîç Recherche de recettes avec la requ√™te: "${query}"`);

        let filter = '';
        const filterParts = [];

        // Recherche textuelle
        if (query && query.trim()) {
            filterParts.push(`(nom ~ "${query}" || description ~ "${query}")`);
        }

        // Filtres additionnels
        if (filters.difficulte) {
            filterParts.push(`difficulte = "${filters.difficulte}"`);
        }

        if (filters.temps_max) {
            filterParts.push(`temps_preparation <= ${filters.temps_max}`);
        }

        // Combiner les filtres
        if (filterParts.length > 0) {
            filter = filterParts.join(' && ');
        }

        const recettes = await pb.collection('recettes').getFullList({
            filter: filter,
            sort: '-created'
        });

        console.log(`‚úÖ ${recettes.length} recettes trouv√©es`);

        // Transformer les donn√©es
        const recettesTransformees = recettes.map(recette => ({
            id: recette.id,
            nom: recette.nom,
            description: recette.description,
            image: recette.image ? `http://127.0.0.1:8090/api/files/recettes/${recette.id}/${recette.image}` : null,
            temps_preparation: recette.temps_preparation,
            difficulte: recette.difficulte,
            created: recette.created,
            updated: recette.updated,
            isFavorite: false
        }));

        return recettesTransformees;

    } catch (error) {
        console.error('‚ùå Erreur lors de la recherche:', error);
        return [];
    }
}

// ‚úÖ R√âCUP√àRE LES PARTENAIRES
export async function getPartenaires() {
    try {
        console.log('üè™ R√©cup√©ration des partenaires...');

        const partenaires = await pb.collection('partenaires').getFullList({
            sort: 'nom'
        });

        console.log(`‚úÖ ${partenaires.length} partenaires r√©cup√©r√©s`);

        // Transformer les donn√©es pour inclure l'URL compl√®te de l'image
        const partenairesTransformes = partenaires.map(partenaire => ({
            id: partenaire.id,
            nom: partenaire.nom,
            description: partenaire.description,
            adresse: partenaire.adresse,
            ville: partenaire.ville,
            code_postal: partenaire.code_postal,
            region: partenaire.region,
            latitude: partenaire.latitude,
            longitude: partenaire.longitude,
            categories: partenaire.categories,
            promo_code: partenaire.promo_code,
            promo_description: partenaire.promo_description,
            image: partenaire.image ? `http://127.0.0.1:8090/api/files/partenaires/${partenaire.id}/${partenaire.image}` : null,
            created: partenaire.created,
            updated: partenaire.updated
        }));

        return partenairesTransformes;

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des partenaires:', error);

        // Retourner des donn√©es de d√©monstration en cas d'erreur
        return getDemoPartenaires();
    }
}

// ‚úÖ DONN√âES DE D√âMONSTRATION POUR LES PARTENAIRES
function getDemoPartenaires() {
    return [
        {
            id: 'demo-p1',
            nom: 'Bio Market',
            description: 'Magasin bio avec des produits frais et locaux',
            adresse: '123 Rue de la Paix',
            ville: 'Paris',
            code_postal: '75001',
            region: '√éle-de-France',
            latitude: 48.8566,
            longitude: 2.3522,
            categories: ['bio', 'l√©gumes'],
            promo_code: 'COOKUP10',
            promo_description: '10% de r√©duction sur tous les l√©gumes bio',
            image: '/placeholder.svg?height=200&width=300&text=Bio+Market',
            created: new Date().toISOString(),
            updated: new Date().toISOString()
        },
        {
            id: 'demo-p2',
            nom: 'Boucherie Traditionnelle',
            description: 'Viandes de qualit√©, √©levage local',
            adresse: '456 Avenue des Champs',
            ville: 'Lyon',
            code_postal: '69001',
            region: 'Auvergne-Rh√¥ne-Alpes',
            latitude: 45.7640,
            longitude: 4.8357,
            categories: ['viande', 'traditionnel'],
            promo_code: 'VIANDE15',
            promo_description: '15% sur les viandes premium',
            image: '/placeholder.svg?height=200&width=300&text=Boucherie',
            created: new Date().toISOString(),
            updated: new Date().toISOString()
        }
    ];
}
