import PocketBase from "pocketbase"

// Initialiser PocketBase
const pb = new PocketBase("https://cookit-up.titouan-winkel.fr")

// Exporter l'instance pour pouvoir l'utiliser ailleurs
export { pb }

// Fonction pour initialiser les boutons favoris
export function initFavorisButtons() {
    console.log("üöÄ Initialisation des boutons favoris...")

    // S√©lectionner tous les boutons favoris
    const favorisButtons = document.querySelectorAll(".js-favori-btn")
    console.log(`üîç ${favorisButtons.length} boutons favoris trouv√©s`)

    // Ajouter un √©couteur d'√©v√©nement √† chaque bouton
    favorisButtons.forEach((button) => {
        button.addEventListener("click", handleFavoriClick)
    })
}

// G√©rer le clic sur un bouton favori
async function handleFavoriClick(event) {
    // Emp√™cher la propagation de l'√©v√©nement (pour √©viter de cliquer sur le lien parent)
    event.stopPropagation()
    event.preventDefault()

    console.log("‚ù§Ô∏è Clic sur un bouton favori")

    // R√©cup√©rer l'ID de la recette
    const recetteId = this.dataset.id
    if (!recetteId) {
        console.error("‚ùå ID de recette non trouv√©")
        return
    }

    console.log(`üçΩÔ∏è ID de la recette: ${recetteId}`)

    // V√©rifier si l'utilisateur est connect√©
    const isLoggedIn = pb.authStore.isValid
    if (!isLoggedIn) {
        console.log("‚ö†Ô∏è Utilisateur non connect√©, redirection vers la page de connexion")
        showNotification("Connectez-vous pour ajouter des favoris", "warning")
        window.location.href = "/connexion"
        return
    }

    // R√©cup√©rer l'ID de l'utilisateur
    const userId = pb.authStore.model.id
    console.log(`üë§ ID de l'utilisateur: ${userId}`)

    try {
        // V√©rifier si le favori existe d√©j√†
        console.log("üîç V√©rification si le favori existe d√©j√†...")
        const favoris = await pb.collection("favoris").getFullList({
            filter: `recette = "${recetteId}" && user = "${userId}"`,
        })

        const isFavorite = favoris.length > 0
        console.log(`üîç Favori existant: ${isFavorite}`)

        // R√©cup√©rer l'ic√¥ne du c≈ìur
        const heartIcon = this.querySelector("svg")

        if (isFavorite) {
            // Supprimer le favori
            console.log("üíî Suppression du favori...")
            await pb.collection("favoris").delete(favoris[0].id)

            // Mettre √† jour l'ic√¥ne
            if (heartIcon) {
                heartIcon.setAttribute("fill", "none")
                heartIcon.style.color = "#666"
            }

            // Mettre √† jour le texte du bouton si pr√©sent
            const buttonText = this.querySelector(".button-text")
            if (buttonText) {
                buttonText.textContent = "Ajouter aux favoris"
            }

            showNotification("Recette retir√©e des favoris", "info")
        } else {
            // Ajouter le favori
            console.log("‚ù§Ô∏è Ajout du favori...")
            await pb.collection("favoris").create({
                recette: recetteId,
                user: userId,
            })

            // Mettre √† jour l'ic√¥ne
            if (heartIcon) {
                heartIcon.setAttribute("fill", "red")
                heartIcon.style.color = "red"
            }

            // Mettre √† jour le texte du bouton si pr√©sent
            const buttonText = this.querySelector(".button-text")
            if (buttonText) {
                buttonText.textContent = "Retirer des favoris"
            }

            showNotification("Recette ajout√©e aux favoris", "success")
        }

        // D√©clencher un √©v√©nement personnalis√© pour informer d'autres composants
        document.dispatchEvent(
            new CustomEvent("favoriToggled", {
                detail: {
                    recetteId,
                    isFavorite: !isFavorite,
                },
            }),
        )
    } catch (error) {
        console.error("‚ùå Erreur lors de la gestion du favori:", error)
        showNotification("Une erreur est survenue", "error")
    }
}

// Fonction pour afficher une notification
function showNotification(message, type = "info") {
    // Cr√©er la notification
    const notification = document.createElement("div")

    // D√©finir les classes en fonction du type
    let bgColor = "bg-blue-500"
    if (type === "success") bgColor = "bg-green-500"
    if (type === "error") bgColor = "bg-red-500"
    if (type === "warning") bgColor = "bg-yellow-500"

    notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transition-opacity`
    notification.textContent = message

    // Ajouter la notification au DOM
    document.body.appendChild(notification)

    // Supprimer la notification apr√®s 3 secondes
    setTimeout(() => {
        notification.style.opacity = "0"
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification)
            }
        }, 300)
    }, 3000)
}

// Fonction pour v√©rifier si l'utilisateur est connect√©
export function isLoggedIn() {
    return pb.authStore.isValid
}

// Fonction pour r√©cup√©rer l'utilisateur connect√©
export function getCurrentUser() {
    return pb.authStore.model
}
