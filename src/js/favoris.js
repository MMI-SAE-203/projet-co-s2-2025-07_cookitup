import PocketBase from "pocketbase"

// Initialiser PocketBase directement dans ce fichier
const pb = new PocketBase("https://cookit-up.titouan-winkel.fr")

/**
 * V√©rifie si une recette est dans les favoris de l'utilisateur connect√©
 * @param {string} recetteId ID de la recette
 * @returns {Promise<boolean>} True si la recette est favorite
 */
export async function isFavorite(recetteId) {
    if (!pb.authStore.isValid) return false

    try {
        const favoris = await pb.collection("favoris").getFullList({
            filter: `user = "${pb.authStore.model.id}" && recette = "${recetteId}"`,
        })
        return favoris.length > 0
    } catch (error) {
        console.error("Erreur lors de la v√©rification des favoris:", error)
        return false
    }
}

/**
 * Ajoute ou retire une recette des favoris
 * @param {string} recetteId ID de la recette
 * @returns {Promise<boolean>} True si ajout√©, false si retir√©
 */
export async function toggleFavori(recetteId) {
    if (!pb.authStore.isValid) {
        throw new Error("Vous devez √™tre connect√© pour g√©rer vos favoris")
    }

    try {
        console.log("üîç V√©rification si la recette est d√©j√† en favori...")
        // V√©rifier si la recette est d√©j√† en favori
        const existingFavoris = await pb.collection("favoris").getFullList({
            filter: `user = "${pb.authStore.model.id}" && recette = "${recetteId}"`,
        })

        console.log("üìä R√©sultat de la recherche:", existingFavoris.length > 0 ? "D√©j√† en favori" : "Pas encore en favori")

        if (existingFavoris.length > 0) {
            // Retirer des favoris
            console.log("üóëÔ∏è Suppression du favori ID:", existingFavoris[0].id)
            await pb.collection("favoris").delete(existingFavoris[0].id)
            console.log("‚úÖ Recette retir√©e des favoris")
            return false
        } else {
            // Ajouter aux favoris
            console.log("‚ûï Ajout aux favoris - User:", pb.authStore.model.id, "Recette:", recetteId)
            const result = await pb.collection("favoris").create({
                user: pb.authStore.model.id,
                recette: recetteId,
            })
            console.log("‚úÖ Recette ajout√©e aux favoris, ID:", result.id)
            return true
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la gestion des favoris:", error)
        throw error
    }
}

/**
 * R√©cup√®re toutes les recettes favorites de l'utilisateur connect√©
 * @returns {Promise<Array>} Liste des recettes favorites
 */
export async function getUserFavorites() {
    if (!pb.authStore.isValid) return []

    try {
        const favoris = await pb.collection("favoris").getFullList({
            filter: `user = "${pb.authStore.model.id}"`,
            expand: "recette",
            sort: "-created",
        })

        return favoris.map((favori) => favori.expand.recette).filter(Boolean)
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des favoris:", error)
        return []
    }
}

/**
 * R√©cup√®re les IDs des recettes favorites pour l'affichage
 * @returns {Promise<Array>} Liste des IDs des recettes favorites
 */
export async function getUserFavoriteIds() {
    if (!pb.authStore.isValid) return []

    try {
        const favoris = await pb.collection("favoris").getFullList({
            filter: `user = "${pb.authStore.model.id}"`,
        })

        return favoris.map((favori) => favori.recette)
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des IDs favoris:", error)
        return []
    }
}

// Exporter l'instance PocketBase pour l'utiliser dans d'autres fichiers si n√©cessaire
export { pb }

// Gestion des √©v√©nements pour les boutons favoris
export function initFavorisButtons() {
    console.log("üîÑ Initialisation des boutons favoris...")

    // Utiliser la d√©l√©gation d'√©v√©nements pour g√©rer les clics
    document.addEventListener("click", async (event) => {
        // V√©rifier si l'√©l√©ment cliqu√© ou un de ses parents a la classe js-favori-btn
        const button = event.target.closest(".js-favori-btn")
        if (!button) return

        console.log("‚ù§Ô∏è Clic sur bouton favori d√©tect√©")

        event.preventDefault()
        event.stopPropagation()

        const recetteId = button.dataset.id
        if (!recetteId) {
            console.error("‚ùå ID de recette manquant")
            return
        }

        console.log("üìù ID de recette:", recetteId)

        // V√©rifier si l'utilisateur est connect√©
        if (!pb.authStore.isValid) {
            console.log("‚ö†Ô∏è Utilisateur non connect√©")
            if (confirm("Vous devez √™tre connect√© pour g√©rer vos favoris. Voulez-vous vous connecter ?")) {
                window.location.href = "/connexion"
            }
            return
        }

        const heartIcon = button.querySelector("svg")
        const buttonText = button.querySelector(".button-text")

        try {
            // D√©sactiver le bouton pendant le traitement
            button.disabled = true
            console.log("üîÑ Traitement en cours...")

            const isNowFavorite = await toggleFavori(recetteId)
            console.log("‚úÖ Favori mis √† jour:", isNowFavorite ? "ajout√©" : "retir√©")

            // Mettre √† jour l'ic√¥ne imm√©diatement
            if (heartIcon) {
                heartIcon.setAttribute("fill", isNowFavorite ? "red" : "none")
                heartIcon.style.color = isNowFavorite ? "red" : "#666"
            }

            // Animation
            button.style.transform = "scale(1.2)"
            setTimeout(() => {
                button.style.transform = "scale(1)"
            }, 150)

            // Mettre √† jour le texte du bouton si pr√©sent
            if (buttonText) {
                buttonText.textContent = isNowFavorite ? "‚ù§Ô∏è Retirer des favoris" : "ü§ç Ajouter aux favoris"
            }

            // Afficher un message de confirmation
            const message = isNowFavorite ? "Ajout√© aux favoris !" : "Retir√© des favoris !"
            console.log("üì¢", message)

            // Optionnel : afficher une notification
            showNotification(message)

            // D√©clencher un √©v√©nement personnalis√© pour informer les autres parties de l'app
            const favoriEvent = new CustomEvent("favoriToggled", {
                detail: { recetteId, isNowFavorite },
            })
            document.dispatchEvent(favoriEvent)
        } catch (error) {
            console.error("‚ùå Erreur favoris:", error)
            alert("Erreur lors de la mise √† jour des favoris: " + error.message)
        } finally {
            button.disabled = false
        }
    })
}

// Fonction pour afficher une notification temporaire
function showNotification(message) {
    // Cr√©er l'√©l√©ment de notification
    const notification = document.createElement("div")
    notification.className =
        "fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity"
    notification.textContent = message

    // Ajouter au DOM
    document.body.appendChild(notification)

    // Supprimer apr√®s 3 secondes
    setTimeout(() => {
        notification.style.opacity = "0"
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification)
            }
        }, 300)
    }, 3000)
}
