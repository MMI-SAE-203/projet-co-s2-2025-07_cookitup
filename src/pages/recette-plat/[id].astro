---
import Layout from "../../layouts/Layout.astro";
import {
    getRecetteById,
    getRecettesSimilaires,
    getAllRecettes,
} from "../../js/backend.mjs";
import Plat from "../../components/Plat.astro";

// ‚úÖ FONCTION OBLIGATOIRE pour les routes dynamiques
export async function getStaticPaths() {
    try {
        const recettes = await getAllRecettes();

        console.log(
            "üìã G√©n√©ration des pages statiques pour",
            recettes.length,
            "recettes",
        );

        return recettes.map((recette) => ({
            params: {
                id: recette.id,
            },
            props: {
                recette: recette,
            },
        }));
    } catch (error) {
        console.error(
            "‚ùå Erreur lors de la g√©n√©ration des chemins statiques:",
            error,
        );
        return [];
    }
}

const { id } = Astro.params;
const { recette: recetteProp } = Astro.props;

let recette;
let recettesSimilaires = [];

if (recetteProp) {
    recette = recetteProp;
    console.log("‚úÖ Utilisation des donn√©es depuis getStaticPaths");
} else {
    console.log("üì° R√©cup√©ration des donn√©es via API...");
    try {
        recette = await getRecetteById(id);
        if (!recette) {
            Astro.redirect("/recette-plat", 302);
            return;
        }
    } catch (error) {
        console.error("‚ùå Erreur:", error);
        Astro.redirect("/recette-plat", 302);
        return;
    }
}

try {
    recettesSimilaires = await getRecettesSimilaires(id, 4);
} catch (error) {
    console.error("‚ùå Erreur recettes similaires:", error);
}

// ‚úÖ CORRECTION : Utiliser "img" au lieu de "image"
const imageUrl = recette.img
    ? `http://127.0.0.1:8090/api/files/recettes/${recette.id}/${recette.img}`
    : "/placeholder.svg";
---

<Layout>
    <!-- Hero de la recette -->
    <section class="relative w-full h-[500px]">
        <img
            src={imageUrl || "/placeholder.svg"}
            alt={recette.nom}
            class="w-full h-full object-cover"
        />
        <div
            class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center"
        >
            <div class="text-center text-white px-4">
                <h1 class="text-4xl md:text-6xl font-bold mb-4 uppercase">
                    {recette.nom}
                </h1>
                <div class="flex justify-center gap-6 text-lg flex-wrap">
                    <span>‚è±Ô∏è {recette.temps_prep}</span>
                    {
                        recette.categorie && (
                            <span class="bg-blue-500 px-3 py-1 rounded">
                                üìÇ {recette.categorie}
                            </span>
                        )
                    }
                    {
                        recette.isFavorite && (
                            <span class="bg-red-500 px-3 py-1 rounded">
                                ‚ù§Ô∏è Favoris
                            </span>
                        )
                    }
                    {
                        recette.expand?.sponsorise && (
                            <span class="bg-yellow-500 px-3 py-1 rounded">
                                üåü Sponsoris√©
                            </span>
                        )
                    }
                </div>
            </div>
        </div>
    </section>

    <!-- Contenu de la recette -->
    <div class="max-w-6xl mx-auto px-6 py-12">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
            <!-- Ingr√©dients -->
            <div class="lg:col-span-1">
                <div class="bg-gray-50 p-6 rounded-lg sticky top-6">
                    <h2 class="text-2xl font-bold mb-6">Ingr√©dients</h2>

                    {
                        recette.expand?.ingredients &&
                        recette.expand.ingredients.length > 0 ? (
                            <ul class="space-y-3">
                                {recette.expand.ingredients.map(
                                    (ingredient) => (
                                        <li class="flex items-center">
                                            <span class="w-2 h-2 bg-yellow-500 rounded-full mr-3" />
                                            <span>
                                                {ingredient.nom ||
                                                    ingredient.name}
                                            </span>
                                        </li>
                                    ),
                                )}
                            </ul>
                        ) : (
                            <p class="text-gray-500">
                                Aucun ingr√©dient sp√©cifi√©
                            </p>
                        )
                    }
                </div>
            </div>

            <!-- Instructions -->
            <div class="lg:col-span-2">
                <h2 class="text-2xl font-bold mb-6">Pr√©paration</h2>

                <div class="prose max-w-none">
                    {
                        /* ‚úÖ CORRECTION : Utiliser "preparation" au lieu de "texte_cuisine" ou "instructions" */
                    }
                    <div
                        class="text-gray-800 whitespace-pre-line leading-relaxed"
                    >
                        {
                            recette.preparation ||
                                "Instructions de pr√©paration non disponibles"
                        }
                    </div>
                </div>

                {
                    recette.expand?.sponsorise && (
                        <div class="mt-12 p-6 bg-yellow-50 border-l-4 border-yellow-500 rounded-r-lg">
                            <h3 class="font-bold text-lg mb-3">
                                üåü Recette sponsoris√©e
                            </h3>
                            <p class="text-gray-700">
                                Cette recette est sponsoris√©e par{" "}
                                {recette.expand.sponsorise.nom ||
                                    "notre partenaire"}
                            </p>
                        </div>
                    )
                }
            </div>
        </div>
    </div>

    <!-- Actions -->
    <section class="py-8 px-6 border-t border-gray-200">
        <div class="max-w-6xl mx-auto flex justify-center gap-4 flex-wrap">
            <button
                class="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg transition font-medium js-favori-btn"
                data-id={recette.id}
            >
                <span class="button-text">
                    {
                        recette.isFavorite
                            ? "‚ù§Ô∏è Retirer des favoris"
                            : "ü§ç Ajouter aux favoris"
                    }
                </span>
            </button>
            <button
                class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition font-medium"
                onclick="window.print()"
            >
                üñ®Ô∏è Imprimer la recette
            </button>
            <button
                class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg transition font-medium"
                onclick="navigator.share ? navigator.share({title: document.title, url: window.location.href}) : navigator.clipboard.writeText(window.location.href)"
            >
                üì§ Partager
            </button>
        </div>
    </section>

    <!-- Recettes similaires -->
    {
        recettesSimilaires.length > 0 && (
            <section class="bg-gray-50 py-12 px-6">
                <div class="max-w-6xl mx-auto">
                    <h2 class="text-2xl md:text-3xl font-bold mb-8">
                        Recettes similaires
                    </h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                        {recettesSimilaires.map((recette) => (
                            <Plat
                                id={recette.id}
                                nom={recette.nom}
                                img={recette.img}
                                temps_prep={recette.temps_prep}
                                isFavorite={recette.isFavorite}
                                sponsorise={recette.expand?.sponsorise}
                                categorie={recette.categorie}
                            />
                        ))}
                    </div>
                </div>
            </section>
        )
    }
</Layout>

<script>
    import { initFavorisButtons } from "../../js/favoris.js";

    document.addEventListener("DOMContentLoaded", async () => {
        // Initialiser la gestion des favoris
        initFavorisButtons();

        // ‚úÖ NOUVEAU : Initialiser l'√©tat des c≈ìurs
        await initFavoriteState();
    });

    // ‚úÖ NOUVELLE FONCTION : Initialiser l'√©tat du favori pour cette recette
    async function initFavoriteState() {
        // Importer PocketBase
        const { default: pb } = await import("../../lib/pocketbase.js");

        if (!pb.authStore.isValid) {
            console.log("‚ö†Ô∏è Utilisateur non connect√©, pas de favori √† charger");
            return;
        }

        try {
            // R√©cup√©rer l'ID de la recette depuis l'URL
            const recetteId = window.location.pathname.split("/").pop();
            console.log(
                "üîç V√©rification du favori pour la recette:",
                recetteId,
            );

            // V√©rifier si cette recette est favorite
            const favoris = await pb.collection("favoris").getFullList({
                filter: `user = "${pb.authStore.model.id}" && recette = "${recetteId}"`,
            });

            const isFavorite = favoris.length > 0;
            console.log("‚ù§Ô∏è Recette favorite:", isFavorite);

            // Mettre √† jour le bouton de favori
            const favorisButton = document.querySelector(".js-favori-btn");
            const heartIcon = favorisButton?.querySelector("svg");
            const buttonText = favorisButton?.querySelector(".button-text");

            if (favorisButton && heartIcon) {
                if (isFavorite) {
                    heartIcon.setAttribute("fill", "red");
                    heartIcon.style.color = "red";
                    if (buttonText) {
                        buttonText.textContent = "‚ù§Ô∏è Retirer des favoris";
                    }
                    console.log("‚ù§Ô∏è Bouton marqu√© comme favori");
                } else {
                    heartIcon.setAttribute("fill", "none");
                    heartIcon.style.color = "currentColor";
                    if (buttonText) {
                        buttonText.textContent = "ü§ç Ajouter aux favoris";
                    }
                    console.log("ü§ç Bouton marqu√© comme non favori");
                }
            }
        } catch (error) {
            console.error(
                "‚ùå Erreur lors de l'initialisation du favori:",
                error,
            );
        }
    }
</script>
