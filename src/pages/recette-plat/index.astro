---
import Layout from "../../layouts/Layout.astro";
import Plat from "../../components/Plat.astro";
import PlatFavoris from "../../components/PlatFavoris.astro";
import { Image } from "astro:assets";
import imagePouletRoti from "../../assets/img/recettes/poulet_roti.png";
import { getAllRecettes, getRecettesSponsors } from "../../js/backend.mjs";

const recettes = await getAllRecettes();
const recettesSponsors = await getRecettesSponsors();

console.log("üìä Recettes r√©cup√©r√©es:", recettes.length);
console.log("üåü Recettes sponsoris√©es:", recettesSponsors.length);
---

<Layout>
    <!-- Slider principal -->
    <section class="relative w-full">
        <div class="slider-slide">
            <Image
                src={imagePouletRoti || "/placeholder.svg"}
                alt="Poulet r√¥ti"
                class="w-full h-[400px] object-cover"
            />
            <div
                class="absolute inset-0 flex flex-col items-center justify-center text-white bg-black bg-opacity-40 px-4"
            >
                <h2 class="text-3xl md:text-5xl font-bold mb-4">POULET ROTI</h2>
                <a
                    href="/recette-plat/poulet-roti"
                    class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold px-6 py-2 rounded-full text-sm shadow-md transition"
                >
                    VOIR LA RECETTE
                </a>
            </div>
        </div>
    </section>

    <!-- Section Recettes en vedette -->
    <section class="bg-[#C2584F] text-white py-12 px-6 relative">
        <h2 class="text-xl md:text-3xl font-bold uppercase mb-8">
            Recettes en vedette
        </h2>

        <div
            class="flex gap-4 overflow-x-auto snap-x pb-4"
            id="vedettesContainer"
        >
            {
                recettesSponsors.length > 0
                    ? recettesSponsors
                          .slice(0, 6)
                          .map((plat) => (
                              <PlatFavoris
                                  id={plat.id}
                                  nom={plat.nom}
                                  img={plat.img}
                              />
                          ))
                    : recettes
                          .slice(0, 6)
                          .map((plat) => (
                              <PlatFavoris
                                  id={plat.id}
                                  nom={plat.nom}
                                  img={plat.img}
                              />
                          ))
            }
        </div>
    </section>

    <!-- Section Autres recettes -->
    <section class="py-12 px-6">
        <h2 class="text-xl md:text-3xl font-bold mb-4">Toutes nos recettes</h2>
        <p class="mb-6 text-gray-600">
            Choisissez parmi une grande liste de plats celui qui vous
            correspond, et lancez-vous !
        </p>

        <!-- Barre de recherche et filtres -->
        <div class="mb-8 flex flex-col md:flex-row gap-4">
            <div class="flex-1">
                <input
                    type="text"
                    placeholder="Rechercher une recette..."
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="searchInput"
                />
            </div>
            <div class="flex gap-2 flex-wrap">
                <!-- Filtre par cat√©gorie -->
                <select
                    class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="categorieSelect"
                >
                    <option value="tous">Toutes les cat√©gories</option>
                    <option value="entree">Entr√©es</option>
                    <option value="plat">Plats</option>
                    <option value="dessert">Desserts</option>
                </select>

                <!-- Autres filtres -->
                <select
                    class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="filterSelect"
                >
                    <option value="tous">Tous les types</option>
                    <option value="sponsorises">Sponsoris√©s</option>
                    <option value="favoris">Favoris</option>
                </select>

                <!-- Tri -->
                <select
                    class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="sortSelect"
                >
                    <option value="default">Trier par</option>
                    <option value="nom">Nom A-Z</option>
                    <option value="recent">Plus r√©cent</option>
                    <option value="temps">Temps de pr√©paration</option>
                </select>
            </div>
        </div>

        <div
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"
            id="recettesGrid"
        >
            {
                recettes.length > 0 ? (
                    recettes.map((plat) => (
                        <Plat
                            id={plat.id}
                            nom={plat.nom}
                            img={plat.img}
                            temps_prep={plat.temps_prep}
                            isFavorite={plat.isFavorite}
                            sponsorise={plat.expand?.sponsorise}
                            categorie={plat.categorie}
                        />
                    ))
                ) : (
                    <div class="col-span-full text-center py-12 bg-gray-100 rounded-lg">
                        <h3 class="text-xl font-bold text-gray-800 mb-2">
                            Aucune recette trouv√©e
                        </h3>
                        <p class="text-gray-600">
                            V√©rifiez que PocketBase est d√©marr√© et contient des
                            donn√©es
                        </p>
                    </div>
                )
            }
        </div>
    </section>

    <!-- Section CTA -->
    <section class="bg-green-600 text-white py-12 px-6 text-center">
        <h2 class="text-2xl md:text-3xl font-bold mb-4">
            D√âCOUVREZ NOS RECETTES
        </h2>
        <p class="mb-6">
            Explorez notre collection de recettes d√©licieuses et faciles √†
            r√©aliser !
        </p>
        <div class="flex justify-center gap-4 flex-wrap">
            <a
                href="#recettesGrid"
                class="inline-block bg-white text-green-600 font-bold px-6 py-3 rounded-full hover:bg-gray-100 transition"
            >
                Voir toutes les recettes
            </a>
            <a
                href="/favoris"
                class="inline-block bg-red-500 text-white font-bold px-6 py-3 rounded-full hover:bg-red-600 transition"
            >
                Mes recettes favorites
            </a>
        </div>
    </section>
</Layout>

<script>
    import { initFavorisButtons } from "../../js/favoris.js";
    import {
        initMainSlider,
        initFavorisCarousel,
    } from "../../js/recettes/slider-carousel.js";
    import { initSearchAndFilters } from "../../js/recettes/search-filters.js";
    import { initPagination } from "../../js/recettes/pagination.js";

    document.addEventListener("DOMContentLoaded", async () => {
        // Initialiser la gestion des favoris
        initFavorisButtons();

        initMainSlider();
        initFavorisCarousel();
        initSearchAndFilters();
        initPagination();

        // ‚úÖ NOUVEAU : Initialiser l'√©tat des c≈ìurs apr√®s chargement
        await initFavoriteStates();

        // Filtre par cat√©gorie
        const categorieSelect = document.getElementById("categorieSelect");
        if (categorieSelect) {
            categorieSelect.addEventListener("change", function () {
                const categorie = this.value;
                const recettes = document.querySelectorAll(
                    "#recettesGrid > div",
                );

                recettes.forEach((recette) => {
                    if (
                        categorie === "tous" ||
                        recette.dataset.categorie === categorie
                    ) {
                        recette.style.display = "block";
                    } else {
                        recette.style.display = "none";
                    }
                });
            });
        }
    });

    // ‚úÖ NOUVELLE FONCTION : Initialiser l'√©tat des favoris
    async function initFavoriteStates() {
        // Importer PocketBase
        const { default: pb } = await import("../../lib/pocketbase.js");

        if (!pb.authStore.isValid) {
            console.log(
                "‚ö†Ô∏è Utilisateur non connect√©, pas de favoris √† charger",
            );
            return;
        }

        try {
            console.log("üîÑ Chargement de l'√©tat des favoris...");

            // R√©cup√©rer tous les favoris de l'utilisateur
            const favoris = await pb.collection("favoris").getFullList({
                filter: `user = "${pb.authStore.model.id}"`,
            });

            const favoriteIds = favoris.map((favori) => favori.recette);
            console.log("‚ù§Ô∏è IDs des favoris:", favoriteIds);

            // Mettre √† jour tous les boutons de favoris
            const favorisButtons = document.querySelectorAll(".js-favori-btn");
            favorisButtons.forEach((button) => {
                const recetteId = button.dataset.id;
                const heartIcon = button.querySelector("svg");

                if (favoriteIds.includes(recetteId)) {
                    // Cette recette est favorite
                    if (heartIcon) {
                        heartIcon.setAttribute("fill", "red");
                        heartIcon.style.color = "red";
                    }
                    console.log(
                        `‚ù§Ô∏è Recette ${recetteId} marqu√©e comme favorite`,
                    );
                } else {
                    // Cette recette n'est pas favorite
                    if (heartIcon) {
                        heartIcon.setAttribute("fill", "none");
                        heartIcon.style.color = "currentColor";
                    }
                }
            });

            console.log(
                `‚úÖ √âtat des favoris initialis√© pour ${favorisButtons.length} boutons`,
            );
        } catch (error) {
            console.error(
                "‚ùå Erreur lors de l'initialisation des favoris:",
                error,
            );
        }
    }
</script>
