---
import Layout from "../../layouts/Layout.astro";
import Plat from "../../components/Plat.astro";
import PlatFavoris from "../../components/PlatFavoris.astro";
import { Image } from "astro:assets";
import imagePouletRoti from "../../assets/img/recettes/poulet_roti.png";
import { getAllRecettes, getRecettesSponsors } from "../../backend.mjs";

const recettes = await getAllRecettes();
const recettesSponsors = await getRecettesSponsors();

console.log("üìä Recettes r√©cup√©r√©es:", recettes.length);
console.log("üåü Recettes sponsoris√©es:", recettesSponsors.length);
---

<Layout>
    <!-- Slider principal -->
    <section class="relative w-full">
        <div class="slider-slide">
            <Image
                src={imagePouletRoti || "/placeholder.svg"}
                alt="Poulet r√¥ti"
                class="w-full h-[400px] object-cover"
            />
            <div
                class="absolute inset-0 flex flex-col items-center justify-center text-white bg-black bg-opacity-40 px-4"
            >
                <h2 class="text-3xl md:text-5xl font-bold mb-4">POULET ROTI</h2>
                <a
                    href="/recette-plat/poulet-roti"
                    class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold px-6 py-2 rounded-full text-sm shadow-md transition"
                >
                    VOIR LA RECETTE
                </a>
            </div>
        </div>
    </section>

    <!-- Section Recettes en vedette -->
    <section class="bg-[#C2584F] text-white py-12 px-6 relative">
        <h2 class="text-xl md:text-3xl font-bold uppercase mb-8">
            Recettes en vedette
        </h2>

        <div
            class="flex gap-4 overflow-x-auto snap-x pb-4"
            id="vedettesContainer"
        >
            {
                recettesSponsors.length > 0
                    ? recettesSponsors
                          .slice(0, 6)
                          .map((plat) => (
                              <PlatFavoris
                                  id={plat.id}
                                  nom={plat.nom}
                                  img={plat.img}
                              />
                          ))
                    : recettes
                          .slice(0, 6)
                          .map((plat) => (
                              <PlatFavoris
                                  id={plat.id}
                                  nom={plat.nom}
                                  img={plat.img}
                              />
                          ))
            }
        </div>
    </section>

    <!-- Section Autres recettes -->
    <section class="py-12 px-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl md:text-3xl font-bold">Toutes nos recettes</h2>
            <div class="text-sm text-gray-600">
                <span id="recettesCount">{recettes.length}</span> recettes disponibles
            </div>
        </div>
        <p class="mb-6 text-gray-600">
            Choisissez parmi une grande liste de plats celui qui vous
            correspond, et lancez-vous !
        </p>

        <!-- Barre de recherche et filtres -->
        <div class="mb-8 flex flex-col md:flex-row gap-4">
            <div class="flex-1">
                <input
                    type="text"
                    placeholder="Rechercher une recette..."
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="searchInput"
                />
            </div>
            <div class="flex gap-2 flex-wrap">
                <!-- Filtre par cat√©gorie -->
                <select
                    class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="categorieSelect"
                >
                    <option value="tous">Toutes les cat√©gories</option>
                    <option value="entree">Entr√©es</option>
                    <option value="plat">Plats</option>
                    <option value="dessert">Desserts</option>
                </select>

                <!-- Autres filtres -->
                <select
                    class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="filterSelect"
                >
                    <option value="tous">Tous les types</option>
                    <option value="sponsorises">Sponsoris√©s</option>
                    <option value="favoris">Favoris</option>
                </select>

                <!-- Tri -->
                <select
                    class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    id="sortSelect"
                >
                    <option value="default">Trier par</option>
                    <option value="nom">Nom A-Z</option>
                    <option value="recent">Plus r√©cent</option>
                    <option value="temps">Temps de pr√©paration</option>
                </select>
            </div>
        </div>

        <!-- Informations de pagination -->
        <div class="mb-4 flex justify-between items-center">
            <div class="text-sm text-gray-600">
                Affichage de <span id="currentRangeStart">1</span>-<span
                    id="currentRangeEnd">12</span
                >
                sur <span id="totalRecettes">{recettes.length}</span> recettes
            </div>
            <div class="text-sm text-gray-600">
                Page <span id="currentPageDisplay">1</span> sur <span
                    id="totalPagesDisplay">1</span
                >
            </div>
        </div>

        <div
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"
            id="recettesGrid"
        >
            {
                recettes.length > 0 ? (
                    recettes.map((plat) => (
                        <Plat
                            id={plat.id}
                            nom={plat.nom}
                            img={plat.img}
                            temps_prep={plat.temps_prep}
                            isFavorite={plat.isFavorite}
                            sponsorise={plat.expand?.sponsorise}
                            categorie={plat.categorie}
                        />
                    ))
                ) : (
                    <div class="col-span-full text-center py-12 bg-gray-100 rounded-lg">
                        <h3 class="text-xl font-bold text-gray-800 mb-2">
                            Aucune recette trouv√©e
                        </h3>
                        <p class="text-gray-600">
                            V√©rifiez que PocketBase est d√©marr√© et contient des
                            donn√©es
                        </p>
                    </div>
                )
            }
        </div>

        <!-- Pagination -->
        <div id="paginationContainer" class="mt-8">
            <!-- La pagination sera g√©n√©r√©e dynamiquement -->
        </div>
    </section>

    <!-- Section CTA -->
    <section class="bg-green-600 text-white py-12 px-6 text-center">
        <h2 class="text-2xl md:text-3xl font-bold mb-4">
            D√âCOUVREZ NOS RECETTES
        </h2>
        <p class="mb-6">
            Explorez notre collection de recettes d√©licieuses et faciles √†
            r√©aliser !
        </p>
        <div class="flex justify-center gap-4 flex-wrap">
            <a
                href="#recettesGrid"
                class="inline-block bg-white text-green-600 font-bold px-6 py-3 rounded-full hover:bg-gray-100 transition"
            >
                Voir toutes les recettes
            </a>
            <a
                href="/favoris"
                class="inline-block bg-red-500 text-white font-bold px-6 py-3 rounded-full hover:bg-red-600 transition"
            >
                Mes recettes favorites
            </a>
        </div>
    </section>
</Layout>

<script>
    import { initFavorisButtons } from "../../js/favoris.js";
    import {
        initMainSlider,
        initFavorisCarousel,
    } from "../../js/recettes/slider-carousel.js";
    import { initSearchAndFilters } from "../../js/recettes/search-filters.js";

    document.addEventListener("DOMContentLoaded", async () => {
        // Initialiser la gestion des favoris
        initFavorisButtons();

        initMainSlider();
        initFavorisCarousel();
        initSearchAndFilters();

        // ‚úÖ NOUVEAU : Initialiser la pagination am√©lior√©e
        initAdvancedPagination();

        // ‚úÖ NOUVEAU : Initialiser l'√©tat des c≈ìurs apr√®s chargement
        await initFavoriteStates();

        // Filtre par cat√©gorie
        const categorieSelect = document.getElementById("categorieSelect");
        if (categorieSelect) {
            categorieSelect.addEventListener("change", function () {
                const categorie = this.value;
                filterAndPaginate();
            });
        }

        // Autres filtres
        const filterSelect = document.getElementById("filterSelect");
        const sortSelect = document.getElementById("sortSelect");
        const searchInput = document.getElementById("searchInput");

        if (filterSelect) {
            filterSelect.addEventListener("change", filterAndPaginate);
        }

        if (sortSelect) {
            sortSelect.addEventListener("change", filterAndPaginate);
        }

        if (searchInput) {
            searchInput.addEventListener(
                "input",
                debounce(filterAndPaginate, 300),
            );
        }
    });

    // Variables globales pour la pagination
    let allRecettes = [];
    let filteredRecettes = [];
    let currentPage = 1;
    const itemsPerPage = 12;

    // Initialiser la pagination avanc√©e
    function initAdvancedPagination() {
        // R√©cup√©rer toutes les recettes depuis le DOM
        const recettesGrid = document.getElementById("recettesGrid");
        if (!recettesGrid) return;

        allRecettes = Array.from(recettesGrid.children).map((card, index) => ({
            element: card,
            index: index,
            nom: card.querySelector("h3")?.textContent.toLowerCase() || "",
            categorie: card.dataset.categorie || "",
            temps: card.querySelector('[class*="‚è±Ô∏è"]')?.textContent || "",
            isFavorite: card.querySelector(".bg-red-100") !== null,
            isSponsored: card.querySelector(".bg-yellow-500") !== null,
        }));

        filteredRecettes = [...allRecettes];

        console.log(
            `üìä ${allRecettes.length} recettes charg√©es pour la pagination`,
        );

        // Initialiser l'affichage
        updatePaginationDisplay();
    }

    // Fonction de filtrage et pagination combin√©e
    function filterAndPaginate() {
        const searchTerm =
            document.getElementById("searchInput")?.value.toLowerCase() || "";
        const selectedCategorie =
            document.getElementById("categorieSelect")?.value || "tous";
        const selectedFilter =
            document.getElementById("filterSelect")?.value || "tous";
        const selectedSort =
            document.getElementById("sortSelect")?.value || "default";

        // Filtrer les recettes
        filteredRecettes = allRecettes.filter((recette) => {
            const matchesSearch = recette.nom.includes(searchTerm);
            const matchesCategorie =
                selectedCategorie === "tous" ||
                recette.categorie.toLowerCase() === selectedCategorie;
            const matchesFilter =
                selectedFilter === "tous" ||
                (selectedFilter === "favoris" && recette.isFavorite) ||
                (selectedFilter === "sponsorises" && recette.isSponsored);

            return matchesSearch && matchesCategorie && matchesFilter;
        });

        // Trier les recettes
        if (selectedSort !== "default") {
            filteredRecettes.sort((a, b) => {
                switch (selectedSort) {
                    case "nom":
                        return a.nom.localeCompare(b.nom);
                    case "recent":
                        return b.index - a.index; // Plus r√©cent = index plus √©lev√©
                    case "temps":
                        const timeA = parseInt(a.temps) || 0;
                        const timeB = parseInt(b.temps) || 0;
                        return timeA - timeB;
                    default:
                        return 0;
                }
            });
        }

        // R√©initialiser √† la premi√®re page
        currentPage = 1;

        // Mettre √† jour l'affichage
        updatePaginationDisplay();
    }

    // Mettre √† jour l'affichage de la pagination
    function updatePaginationDisplay() {
        const totalRecettes = filteredRecettes.length;
        const totalPages = Math.ceil(totalRecettes / itemsPerPage);
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, totalRecettes);

        // Masquer toutes les recettes
        allRecettes.forEach((recette) => {
            recette.element.style.display = "none";
        });

        // Afficher les recettes de la page actuelle
        const currentPageRecettes = filteredRecettes.slice(
            startIndex,
            endIndex,
        );
        currentPageRecettes.forEach((recette) => {
            recette.element.style.display = "block";
        });

        // Mettre √† jour les informations de pagination
        document.getElementById("currentRangeStart").textContent =
            totalRecettes > 0 ? startIndex + 1 : 0;
        document.getElementById("currentRangeEnd").textContent = endIndex;
        document.getElementById("totalRecettes").textContent = totalRecettes;
        document.getElementById("currentPageDisplay").textContent = currentPage;
        document.getElementById("totalPagesDisplay").textContent = Math.max(
            totalPages,
            1,
        );
        document.getElementById("recettesCount").textContent = totalRecettes;

        // G√©n√©rer les boutons de pagination
        generatePaginationButtons(totalPages);

        // Afficher message si aucun r√©sultat
        showNoResultsMessage(totalRecettes === 0);

        // Scroll vers le haut de la grille
        if (currentPage > 1) {
            document.getElementById("recettesGrid").scrollIntoView({
                behavior: "smooth",
                block: "start",
            });
        }
    }

    // G√©n√©rer les boutons de pagination
    function generatePaginationButtons(totalPages) {
        const paginationContainer = document.getElementById(
            "paginationContainer",
        );
        if (!paginationContainer || totalPages <= 1) {
            paginationContainer.innerHTML = "";
            return;
        }

        let html =
            '<div class="flex justify-center items-center gap-2 flex-wrap">';

        // Bouton Premi√®re page
        if (currentPage > 1) {
            html += `<button onclick="goToPage(1)" class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 transition text-sm">
                        Premi√®re
                     </button>`;
        }

        // Bouton Pr√©c√©dent
        if (currentPage > 1) {
            html += `<button onclick="goToPage(${currentPage - 1})" class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 transition">
                        ‚Äπ
                     </button>`;
        }

        // Num√©ros de page
        const startPage = Math.max(1, currentPage - 2);
        const endPage = Math.min(totalPages, currentPage + 2);

        if (startPage > 1) {
            html += `<button onclick="goToPage(1)" class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 transition">1</button>`;
            if (startPage > 2) {
                html += `<span class="px-2 py-2 text-gray-500">...</span>`;
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            const isActive = i === currentPage;
            html += `<button onclick="goToPage(${i})" class="px-3 py-2 rounded transition ${
                isActive
                    ? "bg-yellow-500 text-white font-bold"
                    : "border border-gray-300 hover:bg-gray-100"
            }">${i}</button>`;
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                html += `<span class="px-2 py-2 text-gray-500">...</span>`;
            }
            html += `<button onclick="goToPage(${totalPages})" class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 transition">${totalPages}</button>`;
        }

        // Bouton Suivant
        if (currentPage < totalPages) {
            html += `<button onclick="goToPage(${currentPage + 1})" class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 transition">
                        ‚Ä∫
                     </button>`;
        }

        // Bouton Derni√®re page
        if (currentPage < totalPages) {
            html += `<button onclick="goToPage(${totalPages})" class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 transition text-sm">
                        Derni√®re
                     </button>`;
        }

        html += "</div>";

        // S√©lecteur de nombre d'√©l√©ments par page
        html += `
            <div class="mt-4 text-center">
                <label for="itemsPerPageSelect" class="text-sm text-gray-600 mr-2">Recettes par page:</label>
                <select id="itemsPerPageSelect" class="px-3 py-1 border border-gray-300 rounded text-sm" onchange="changeItemsPerPage(this.value)">
                    <option value="12" ${itemsPerPage === 12 ? "selected" : ""}>12</option>
                    <option value="24" ${itemsPerPage === 24 ? "selected" : ""}>24</option>
                    <option value="48" ${itemsPerPage === 48 ? "selected" : ""}>48</option>
                    <option value="all" ${itemsPerPage === 999999 ? "selected" : ""}>Toutes</option>
                </select>
            </div>
        `;

        paginationContainer.innerHTML = html;
    }

    // Aller √† une page sp√©cifique
    window.goToPage = function (page) {
        const totalPages = Math.ceil(filteredRecettes.length / itemsPerPage);
        if (page >= 1 && page <= totalPages) {
            currentPage = page;
            updatePaginationDisplay();
        }
    };

    // Changer le nombre d'√©l√©ments par page
    window.changeItemsPerPage = function (value) {
        if (value === "all") {
            itemsPerPage = 999999; // Afficher toutes les recettes
        } else {
            itemsPerPage = parseInt(value);
        }
        currentPage = 1;
        updatePaginationDisplay();
    };

    // Afficher un message si aucun r√©sultat
    function showNoResultsMessage(show) {
        let noResultsMsg = document.getElementById("noResultsMessage");

        if (show && !noResultsMsg) {
            noResultsMsg = document.createElement("div");
            noResultsMsg.id = "noResultsMessage";
            noResultsMsg.className =
                "col-span-full text-center py-12 text-gray-500 bg-gray-50 rounded-lg";
            noResultsMsg.innerHTML = `
                <div class="text-6xl mb-4">üîç</div>
                <h3 class="text-xl font-bold mb-2">Aucune recette trouv√©e</h3>
                <p>Essayez de modifier vos crit√®res de recherche ou de filtrage</p>
                <button onclick="resetFilters()" class="mt-4 bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded transition">
                    R√©initialiser les filtres
                </button>
            `;
            document.getElementById("recettesGrid").appendChild(noResultsMsg);
        } else if (!show && noResultsMsg) {
            noResultsMsg.remove();
        }
    }

    // R√©initialiser les filtres
    window.resetFilters = function () {
        document.getElementById("searchInput").value = "";
        document.getElementById("categorieSelect").value = "tous";
        document.getElementById("filterSelect").value = "tous";
        document.getElementById("sortSelect").value = "default";
        filterAndPaginate();
    };

    // Fonction debounce pour √©viter trop d'appels lors de la saisie
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // ‚úÖ NOUVELLE FONCTION : Initialiser l'√©tat des favoris
    async function initFavoriteStates() {
        // Importer PocketBase
        const { default: pb } = await import("../../lib/pocketbase.js");

        if (!pb.authStore.isValid) {
            console.log(
                "‚ö†Ô∏è Utilisateur non connect√©, pas de favoris √† charger",
            );
            return;
        }

        try {
            console.log("üîÑ Chargement de l'√©tat des favoris...");

            // R√©cup√©rer tous les favoris de l'utilisateur
            const favoris = await pb.collection("favoris").getFullList({
                filter: `user = "${pb.authStore.model.id}"`,
            });

            const favoriteIds = favoris.map((favori) => favori.recette);
            console.log("‚ù§Ô∏è IDs des favoris:", favoriteIds);

            // Mettre √† jour tous les boutons de favoris
            const favorisButtons = document.querySelectorAll(".js-favori-btn");
            favorisButtons.forEach((button) => {
                const recetteId = button.dataset.id;
                const heartIcon = button.querySelector("svg");

                if (favoriteIds.includes(recetteId)) {
                    // Cette recette est favorite
                    if (heartIcon) {
                        heartIcon.setAttribute("fill", "red");
                        heartIcon.style.color = "red";
                    }
                    console.log(
                        `‚ù§Ô∏è Recette ${recetteId} marqu√©e comme favorite`,
                    );
                } else {
                    // Cette recette n'est pas favorite
                    if (heartIcon) {
                        heartIcon.setAttribute("fill", "none");
                        heartIcon.style.color = "currentColor";
                    }
                }
            });

            console.log(
                `‚úÖ √âtat des favoris initialis√© pour ${favorisButtons.length} boutons`,
            );
        } catch (error) {
            console.error(
                "‚ùå Erreur lors de l'initialisation des favoris:",
                error,
            );
        }
    }
</script>
