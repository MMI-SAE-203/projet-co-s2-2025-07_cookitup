---
import Layout from "../layouts/Layout.astro";
import Hero from "../components/Hero.astro";
---

<Layout title="Créer une recette - Cookit-UP">
    <!-- Hero Section -->
    <Hero
        title="Créer une nouvelle recette"
        subtitle="Partagez vos créations culinaires"
        description="Complétez le formulaire ci-dessous pour partager votre recette avec la communauté Cookit-UP."
        backgroundImage="/placeholder.svg?height=400&width=1200&text=Création+de+recette"
        centered={true}
    />

    <!-- Vérification de connexion -->
    <div
        id="loginRequired"
        class="hidden bg-red-50 border border-red-200 rounded-lg p-6 max-w-4xl mx-auto mt-8"
    >
        <div class="text-center">
            <h2 class="text-2xl font-semibold text-red-800 mb-4">
                Connexion requise
            </h2>
            <p class="text-red-600 mb-6">
                Vous devez être connecté pour créer une recette.
            </p>
            <div class="space-x-4">
                <a
                    href="/connexion"
                    class="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition"
                >
                    Se connecter
                </a>
                <a
                    href="/inscription"
                    class="bg-gray-600 text-white px-6 py-2 rounded-lg hover:bg-gray-700 transition"
                >
                    S'inscrire
                </a>
            </div>
        </div>
    </div>

    <!-- Formulaire de création -->
    <div id="recetteForm" class="max-w-4xl mx-auto px-4 py-8">
        <form id="createRecetteForm" class="space-y-8">
            <!-- Informations de base -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-semibold mb-6 text-gray-800">
                    Informations générales
                </h2>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Nom de la recette -->
                    <div class="md:col-span-2">
                        <label
                            for="nom"
                            class="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Nom de la recette *
                        </label>
                        <input
                            type="text"
                            id="nom"
                            name="nom"
                            required
                            maxlength="100"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                            placeholder="Ex: Pâtes à la carbonara"
                        />
                    </div>

                    <!-- Image -->
                    <div class="md:col-span-2">
                        <label
                            for="img"
                            class="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Photo de la recette
                        </label>
                        <input
                            type="file"
                            id="img"
                            name="img"
                            accept="image/*"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                        />
                        <p class="text-sm text-gray-500 mt-1">
                            Formats acceptés: JPG, PNG, WebP (max 5MB)
                        </p>
                    </div>

                    <!-- Temps de préparation -->
                    <div>
                        <label
                            for="temps_prep"
                            class="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Temps de préparation *
                        </label>
                        <input
                            type="text"
                            id="temps_prep"
                            name="temps_prep"
                            required
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                            placeholder="Ex: 30 minutes"
                        />
                        <p class="text-sm text-gray-500 mt-1">
                            Exemple: 30 minutes, 1h30, etc.
                        </p>
                    </div>

                    <!-- Catégorie -->
                    <div>
                        <label
                            for="categorie"
                            class="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Catégorie *
                        </label>
                        <select
                            id="categorie"
                            name="categorie"
                            required
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                        >
                            <option value="">Choisir une catégorie</option>
                            <option value="entree">Entrée</option>
                            <option value="plat">Plat principal</option>
                            <option value="dessert">Dessert</option>
                        </select>
                    </div>

                    <!-- Calories -->
                    <div>
                        <label
                            for="calories"
                            class="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Calories (optionnel)
                        </label>
                        <input
                            type="number"
                            id="calories"
                            name="calories"
                            min="1"
                            max="5000"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                            placeholder="250"
                        />
                    </div>
                </div>

                <!-- Régimes alimentaires -->
                <div class="mt-6">
                    <label class="block text-sm font-medium text-gray-700 mb-3">
                        Régimes alimentaires (optionnel)
                    </label>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                        <label class="flex items-center">
                            <input
                                type="checkbox"
                                name="regime"
                                value="végétarien"
                                class="mr-2 text-yellow-500 focus:ring-yellow-500"
                            />
                            <span class="text-sm">Végétarien</span>
                        </label>
                        <label class="flex items-center">
                            <input
                                type="checkbox"
                                name="regime"
                                value="végan"
                                class="mr-2 text-yellow-500 focus:ring-yellow-500"
                            />
                            <span class="text-sm">Végan</span>
                        </label>
                        <label class="flex items-center">
                            <input
                                type="checkbox"
                                name="regime"
                                value="sans-gluten"
                                class="mr-2 text-yellow-500 focus:ring-yellow-500"
                            />
                            <span class="text-sm">Sans gluten</span>
                        </label>
                        <label class="flex items-center">
                            <input
                                type="checkbox"
                                name="regime"
                                value="halal"
                                class="mr-2 text-yellow-500 focus:ring-yellow-500"
                            />
                            <span class="text-sm">Halal</span>
                        </label>
                    </div>
                </div>
            </div>

            <!-- Ingrédients -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-semibold mb-6 text-gray-800">
                    Ingrédients
                </h2>

                <div id="ingredientsList" class="space-y-3">
                    <!-- Les ingrédients seront ajoutés ici dynamiquement -->
                </div>

                <button
                    type="button"
                    id="addIngredient"
                    class="mt-4 bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition flex items-center"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5 mr-2"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Ajouter un ingrédient
                </button>
            </div>

            <!-- Instructions de préparation -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-2xl font-semibold mb-6 text-gray-800">
                    Instructions de préparation
                </h2>

                <div class="space-y-3">
                    <label
                        for="preparation"
                        class="block text-sm font-medium text-gray-700 mb-2"
                    >
                        Étapes de préparation *
                    </label>
                    <textarea
                        id="preparation"
                        name="preparation"
                        required
                        rows="8"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                        placeholder="Décrivez toutes les étapes de préparation de votre recette..."
                    ></textarea>
                    <p class="text-sm text-gray-500">
                        Conseil: Numérotez vos étapes pour plus de clarté (1.,
                        2., 3., etc.)
                    </p>
                </div>
            </div>

            <!-- Messages -->
            <div
                id="errorMessage"
                class="hidden bg-red-50 border border-red-200 rounded-lg p-4"
            >
                <div class="flex">
                    <svg
                        class="h-5 w-5 text-red-400 mr-2"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span id="errorText" class="text-red-800"></span>
                </div>
            </div>

            <div
                id="successMessage"
                class="hidden bg-green-50 border border-green-200 rounded-lg p-4"
            >
                <div class="flex">
                    <svg
                        class="h-5 w-5 text-green-400 mr-2"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span id="successText" class="text-green-800"></span>
                </div>
            </div>

            <!-- Boutons d'action -->
            <div class="flex justify-between items-center pt-6">
                <a
                    href="/mes-recettes"
                    class="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition"
                >
                    Annuler
                </a>

                <button
                    type="submit"
                    id="submitBtn"
                    class="bg-yellow-500 text-white px-8 py-3 rounded-lg hover:bg-yellow-600 transition font-semibold flex items-center"
                >
                    <span id="submitText">Créer la recette</span>
                    <svg
                        id="loadingSpinner"
                        class="hidden animate-spin ml-2 h-5 w-5 text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                    >
                        <circle
                            class="opacity-25"
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            stroke-width="4"></circle>
                        <path
                            class="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                    </svg>
                </button>
            </div>
        </form>
    </div>

    <script>
        import { isLoggedIn, getCurrentUser } from "../js/auth.js";
        import { creerRecette } from "../backend.mjs";
        import pb from "../lib/pocketbase.js";

        document.addEventListener("DOMContentLoaded", () => {
            // Vérifier si l'utilisateur est connecté
            if (!isLoggedIn()) {
                document
                    .getElementById("loginRequired")
                    .classList.remove("hidden");
                document.getElementById("recetteForm").classList.add("hidden");
                return;
            }

            // Variables
            let ingredientCount = 0;

            // Éléments DOM
            const form = document.getElementById("createRecetteForm");
            const ingredientsList = document.getElementById("ingredientsList");
            const addIngredientBtn = document.getElementById("addIngredient");
            const errorMessage = document.getElementById("errorMessage");
            const successMessage = document.getElementById("successMessage");
            const submitBtn = document.getElementById("submitBtn");
            const submitText = document.getElementById("submitText");
            const loadingSpinner = document.getElementById("loadingSpinner");

            // Ajouter le premier ingrédient
            addIngredient();

            // Fonction pour ajouter un ingrédient
            function addIngredient() {
                ingredientCount++;
                const ingredientDiv = document.createElement("div");
                ingredientDiv.className = "flex items-center space-x-3";
                ingredientDiv.innerHTML = `
                <span class="text-sm font-medium text-gray-600 w-8">${ingredientCount}.</span>
                <input
                    type="text"
                    name="ingredient_${ingredientCount}"
                    placeholder="Ex: 200g de pâtes"
                    required
                    class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                />
                <button
                    type="button"
                    onclick="removeIngredient(this)"
                    class="text-red-500 hover:text-red-700 p-1"
                    title="Supprimer cet ingrédient"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                </button>
            `;
                ingredientsList.appendChild(ingredientDiv);
            }

            // Fonctions globales pour supprimer
            window.removeIngredient = function (button) {
                if (ingredientsList.children.length > 1) {
                    button.parentElement.remove();
                    updateIngredientNumbers();
                }
            };

            // Mettre à jour la numérotation des ingrédients
            function updateIngredientNumbers() {
                const ingredients = ingredientsList.children;
                for (let i = 0; i < ingredients.length; i++) {
                    const numberSpan = ingredients[i].querySelector("span");
                    numberSpan.textContent = `${i + 1}.`;
                }
            }

            // Event listeners
            addIngredientBtn.addEventListener("click", addIngredient);

            // Fonction pour afficher les messages
            function showError(message) {
                document.getElementById("errorText").textContent = message;
                errorMessage.classList.remove("hidden");
                successMessage.classList.add("hidden");
                window.scrollTo({ top: 0, behavior: "smooth" });
            }

            function showSuccess(message) {
                document.getElementById("successText").textContent = message;
                successMessage.classList.remove("hidden");
                errorMessage.classList.add("hidden");
                window.scrollTo({ top: 0, behavior: "smooth" });
            }

            // Validation des données
            function validateForm(formData, ingredients) {
                const nom = formData.get("nom")?.trim();
                const temps_prep = formData.get("temps_prep")?.trim();
                const categorie = formData.get("categorie");
                const preparation = formData.get("preparation")?.trim();

                if (!nom || nom.length < 3) {
                    throw new Error(
                        "Le nom de la recette doit contenir au moins 3 caractères",
                    );
                }

                if (!temps_prep) {
                    throw new Error("Le temps de préparation est obligatoire");
                }

                if (!categorie) {
                    throw new Error("Veuillez sélectionner une catégorie");
                }

                if (!preparation || preparation.length < 10) {
                    throw new Error(
                        "Les instructions de préparation doivent contenir au moins 10 caractères",
                    );
                }

                if (ingredients.length === 0) {
                    throw new Error("Veuillez ajouter au moins un ingrédient");
                }

                return true;
            }

            // Soumission du formulaire
            form.addEventListener("submit", async (e) => {
                e.preventDefault();

                // Afficher le loading
                submitBtn.disabled = true;
                submitText.textContent = "Création en cours...";
                loadingSpinner.classList.remove("hidden");
                errorMessage.classList.add("hidden");
                successMessage.classList.add("hidden");

                try {
                    const formData = new FormData(form);
                    const user = getCurrentUser();

                    if (!user || !user.id) {
                        throw new Error("Utilisateur non connecté");
                    }

                    console.log(
                        "🔄 Début de création de recette pour l'utilisateur:",
                        user.id,
                    );

                    // Collecter les ingrédients
                    const ingredients = [];
                    const ingredientInputs = form.querySelectorAll(
                        'input[name^="ingredient_"]',
                    );
                    ingredientInputs.forEach((input) => {
                        if (input.value.trim()) {
                            ingredients.push(input.value.trim());
                        }
                    });

                    // Validation
                    validateForm(formData, ingredients);

                    // Collecter les régimes alimentaires
                    const regimes = [];
                    const regimeInputs = form.querySelectorAll(
                        'input[name="regime"]:checked',
                    );
                    regimeInputs.forEach((input) => {
                        regimes.push(input.value);
                    });

                    // Préparer les données de la recette
                    const recetteData = {
                        nom: formData.get("nom").trim(),
                        description:
                            formData
                                .get("preparation")
                                .trim()
                                .substring(0, 200) + "...", // Description courte
                        temps_preparation: formData.get("temps_prep").trim(),
                        categorie: formData.get("categorie"),
                        ingredients: ingredients,
                        instructions: formData
                            .get("preparation")
                            .trim()
                            .split("\n")
                            .filter((line) => line.trim()),
                        regime: regimes.length > 0 ? regimes : undefined,
                        user: user.id,
                    };

                    // Ajouter les calories si spécifiées
                    const calories = formData.get("calories");
                    if (calories && parseInt(calories) > 0) {
                        recetteData.calories = parseInt(calories);
                    }

                    console.log(
                        "📝 Données de la recette à créer:",
                        recetteData,
                    );

                    // Créer la recette via PocketBase directement (plus fiable)
                    const nouvelleRecette = await pb
                        .collection("recettes")
                        .create(recetteData);
                    console.log(
                        "✅ Recette créée avec succès:",
                        nouvelleRecette,
                    );

                    // Upload de l'image si présente
                    const imageFile = formData.get("img");
                    if (imageFile && imageFile.size > 0) {
                        console.log("📸 Upload de l'image en cours...");

                        // Vérifier la taille du fichier (max 5MB)
                        if (imageFile.size > 5 * 1024 * 1024) {
                            throw new Error("L'image ne doit pas dépasser 5MB");
                        }

                        // Vérifier le type de fichier
                        const allowedTypes = [
                            "image/jpeg",
                            "image/jpg",
                            "image/png",
                            "image/webp",
                        ];
                        if (!allowedTypes.includes(imageFile.type)) {
                            throw new Error(
                                "Format d'image non supporté. Utilisez JPG, PNG ou WebP",
                            );
                        }

                        const imageFormData = new FormData();
                        imageFormData.append("image", imageFile);

                        await pb
                            .collection("recettes")
                            .update(nouvelleRecette.id, imageFormData);
                        console.log("✅ Image uploadée avec succès");
                    }

                    showSuccess(
                        "🎉 Recette créée avec succès ! Redirection en cours...",
                    );

                    // Redirection après 2 secondes
                    setTimeout(() => {
                        window.location.href = `/recette-plat/${nouvelleRecette.id}`;
                    }, 2000);
                } catch (error) {
                    console.error(
                        "❌ Erreur lors de la création de la recette:",
                        error,
                    );

                    let errorMsg =
                        "Une erreur est survenue lors de la création de la recette";

                    if (error.message) {
                        errorMsg = error.message;
                    } else if (error.response?.data) {
                        // Erreur PocketBase
                        const pbError = error.response.data;
                        if (pbError.message) {
                            errorMsg = pbError.message;
                        } else if (pbError.data) {
                            // Erreurs de validation des champs
                            const fieldErrors = [];
                            Object.keys(pbError.data).forEach((field) => {
                                const fieldError = pbError.data[field];
                                if (fieldError.message) {
                                    fieldErrors.push(
                                        `${field}: ${fieldError.message}`,
                                    );
                                }
                            });
                            if (fieldErrors.length > 0) {
                                errorMsg = fieldErrors.join(", ");
                            }
                        }
                    }

                    showError(errorMsg);
                } finally {
                    // Restaurer le bouton
                    submitBtn.disabled = false;
                    submitText.textContent = "Créer la recette";
                    loadingSpinner.classList.add("hidden");
                }
            });
        });
    </script>
</Layout>
