---
export interface Props {
    id?: string;
    nom?: string;
    img?: string;
    temps_prep?: string;
    isFavorite?: boolean;
    sponsorise?: any;
    categorie?: string;
    calories?: number;
    regime?: string[];
}

const {
    id = "1",
    nom = "Recette par d√©faut",
    img = "/placeholder.svg",
    temps_prep = "30 min",
    isFavorite = false,
    sponsorise = null,
    categorie = "plat",
    calories = null,
    regime = [],
} = Astro.props;

// ‚úÖ CORRECTION : Utiliser "img" au lieu de "image"
const imageUrl = img
    ? `http://127.0.0.1:8090/api/files/recettes/${id}/${img}`
    : "/placeholder.svg";

// Couleurs par cat√©gorie
const categorieColors = {
    entree: "bg-green-100 text-green-800",
    plat: "bg-blue-100 text-blue-800",
    dessert: "bg-purple-100 text-purple-800",
};

const categorieColor =
    categorieColors[categorie?.toLowerCase()] || "bg-gray-100 text-gray-800";
---

<div
    class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow card-recette"
    data-categorie={categorie}
    data-calories={calories}
    data-regime={regime ? regime.join(",") : ""}
>
    <div class="relative">
        <img
            src={imageUrl || "/placeholder.svg"}
            alt={nom}
            class="w-full h-48 object-cover"
        />

        {
            sponsorise && (
                <div class="absolute top-2 left-2 bg-yellow-500 text-white px-2 py-1 rounded text-xs font-bold">
                    SPONSORIS√â
                </div>
            )
        }

        <!-- Badge cat√©gorie -->
        {
            categorie && (
                <div
                    class={`absolute bottom-2 left-2 ${categorieColor} px-2 py-1 rounded text-xs font-bold uppercase`}
                >
                    {categorie}
                </div>
            )
        }

        <!-- ‚úÖ BOUTON FAVORI CORRIG√â -->
        <button
            type="button"
            class="absolute top-2 right-2 text-white bg-black/40 hover:bg-black/60 p-2 rounded-full js-favori-btn transition-all duration-200"
            data-id={id}
            aria-label={isFavorite
                ? "Retirer des favoris"
                : "Ajouter aux favoris"}
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill={isFavorite ? "red" : "none"}
                viewBox="0 0 24 24"
                stroke="currentColor"
                class="w-6 h-6"
                style={isFavorite ? "color: red;" : "color: white;"}
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                ></path>
            </svg>
        </button>
    </div>

    <div class="p-4">
        <h3 class="font-bold text-lg mb-2 uppercase card-title">{nom}</h3>

        <div class="space-y-2 text-sm text-gray-600 mb-3">
            <div class="flex justify-between items-center">
                <span>‚è±Ô∏è {temps_prep}</span>
                {
                    calories && (
                        <span class="bg-orange-100 text-orange-800 px-2 py-1 rounded text-xs font-medium">
                            üî• {calories} cal
                        </span>
                    )
                }
            </div>

            {
                regime && regime.length > 0 && (
                    <div class="flex flex-wrap gap-1">
                        {regime.map((regimeType) => {
                            const regimeConfig = {
                                v√©g√©tarien: {
                                    icon: "üå±",
                                    color: "bg-green-100 text-green-800",
                                },
                                v√©gan: {
                                    icon: "üåø",
                                    color: "bg-green-100 text-green-800",
                                },
                                "sans-gluten": {
                                    icon: "üåæ",
                                    color: "bg-blue-100 text-blue-800",
                                },
                                halal: {
                                    icon: "‚ò™Ô∏è",
                                    color: "bg-purple-100 text-purple-800",
                                },
                            };
                            const config = regimeConfig[regimeType] || {
                                icon: "üçΩÔ∏è",
                                color: "bg-gray-100 text-gray-800",
                            };

                            return (
                                <span
                                    class={`${config.color} px-2 py-1 rounded text-xs font-medium`}
                                >
                                    {config.icon} {regimeType}
                                </span>
                            );
                        })}
                    </div>
                )
            }

            {
                isFavorite && (
                    <span class="bg-red-100 text-red-800 px-2 py-1 rounded text-xs">
                        ‚ù§Ô∏è Favoris
                    </span>
                )
            }
        </div>

        <a
            href={`/recette-plat/${id}`}
            class="block mt-3 bg-yellow-500 hover:bg-yellow-600 text-white text-center py-2 rounded transition font-medium"
        >
            VOIR LA RECETTE
        </a>
    </div>
</div>
